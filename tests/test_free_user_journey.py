#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ (10 –≤–æ–ø—Ä–æ—Å–æ–≤)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
"""
import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime
from unittest.mock import AsyncMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from bot.services.database_service import db_service
from bot.services.perplexity import AIAnalysisService
from bot.services.pdf_service import ReportGenerator
from bot.database.models import User, Question, Answer, ReportGenerationStatus
from bot.web_app import check_user_reports_status, check_report_status_with_user

class TestFreeUserJourney:
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.telegram_id = 123456789
        self.user = None
        self.questions = []
        self.answers = []
    
    async def setup_test_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        await db_service.delete_user(self.telegram_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = await db_service.get_or_create_user(
            telegram_id=self.telegram_id,
            first_name="–¢–µ—Å—Ç",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            username="test_user"
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {self.user.telegram_id}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ç—á–µ—Ç–æ–≤
        await db_service.clear_report_statuses(self.telegram_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        path = Path("data/questions_with_answers.json")
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
        for item in data["questions"]:
            if item["order_number"] > 10:
                break
            self.questions.append(item)
            self.answers.append({
                "question_id": item["order_number"],
                "text_answer": item["answer"]
            })
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(self.questions)}, –æ—Ç–≤–µ—Ç–æ–≤: {len(self.answers)}")
    
    async def test_user_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüîê –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        assert self.user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert self.user.telegram_id == self.telegram_id, "–ù–µ–≤–µ—Ä–Ω—ã–π telegram_id"
        assert self.user.first_name == "–¢–µ—Å—Ç", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è"
        assert not self.user.is_paid, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º"
        assert not self.user.test_completed, "–¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    async def test_start_test(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
        print("\nüöÄ –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞...")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
        user = await db_service.start_test(self.telegram_id)
        
        assert user.test_started_at is not None, "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        assert user.current_question_id is not None, "–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert not user.test_completed, "–¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç")
    
    async def test_answer_questions(self):
        """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
        print("\nüìù –¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...")
        
        for i, (question, answer) in enumerate(zip(self.questions, self.answers)):
            print(f"   –í–æ–ø—Ä–æ—Å {i+1}/{len(self.questions)}: {question['text'][:50]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            saved_answer = await db_service.save_answer(
                telegram_id=self.telegram_id,
                question_id=answer["question_id"],
                text_answer=answer["text_answer"]
            )
            
            assert saved_answer is not None, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {i+1} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            assert saved_answer.text_answer == answer["text_answer"], "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        
        print("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    async def test_complete_test(self):
        """–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
        print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞...")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        user = await db_service.complete_test(self.telegram_id)
        
        assert user.test_completed, "–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω"
        assert user.test_completed_at is not None, "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        assert user.current_question_id is None, "–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω"
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def test_check_reports_status_before_generation(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("\nüìä –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ (–¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤
        status_response = await check_user_reports_status(self.telegram_id)
        
        assert status_response["status"] == "success", "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success"
        assert status_response["test_completed"] == True, "–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω"
        assert status_response["is_paid"] == False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        free_status = status_response["free_report_status"]
        assert free_status["status"] == "not_ready", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤"
        
        print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–æ—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤)")
    
    async def test_generate_free_report(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nü§ñ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answers = await db_service.get_user_answers(self.telegram_id)
        assert len(user_answers) > 0, "–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = await db_service.get_questions()
        assert len(questions) > 0, "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        ai_service = AIAnalysisService()
        result = await ai_service.generate_psychological_report(self.user, questions, user_answers)
        
        assert result.get("success"), f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result.get('error')}"
        assert "report_file" in result, "–ü—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        report_path = result["report_file"]
        assert Path(report_path).exists(), f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {report_path}"
        
        print(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_kb = Path(report_path).stat().st_size / 1024
        print(f"üìè –†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: {size_kb:.1f} KB")
        assert size_kb > 0, "–†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
    
    async def test_check_reports_status_after_generation(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("\nüìä –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤
        status_response = await check_user_reports_status(self.telegram_id)
        
        assert status_response["status"] == "success", "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        free_status = status_response["free_report_status"]
        assert free_status["status"] == "ready", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤"
        assert "report_path" in free_status, "–ü—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Ç—á–µ—Ç
        available_report = status_response["available_report"]
        assert available_report["type"] == "free", "–î–æ—Å—Ç—É–ø–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º"
        assert available_report["status"] == "ready", "–î–æ—Å—Ç—É–ø–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤"
        
        print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤)")
    
    async def test_download_report(self):
        """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüì• –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤
        status_response = await check_user_reports_status(self.telegram_id)
        free_status = status_response["free_report_status"]
        
        if free_status["status"] == "ready" and "report_path" in free_status:
            report_path = free_status["report_path"]
            assert Path(report_path).exists(), f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {report_path}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            with open(report_path, 'rb') as f:
                content = f.read()
                assert len(content) > 0, "–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø—É—Å—Ç–æ–π"
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {report_path}")
        else:
            print("‚ö†Ô∏è –û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
    
    async def run_full_journey(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("=" * 60)
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("=" * 60)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await self.setup_test_data()
            
            # –¢–µ—Å—Ç—ã
            await self.test_user_registration()
            await self.test_start_test()
            await self.test_answer_questions()
            await self.test_complete_test()
            await self.test_check_reports_status_before_generation()
            await self.test_generate_free_report()
            await self.test_check_reports_status_after_generation()
            await self.test_download_report()
            
            print("\n" + "=" * 60)
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
            raise e

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    test = TestFreeUserJourney()
    await test.run_full_journey()

if __name__ == "__main__":
    asyncio.run(main()) 