#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—É—Ç–µ–π
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–ª–∞—Ç–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

from test_free_user_journey import TestFreeUserJourney
from test_premium_user_journey import TestPremiumUserJourney

async def run_free_user_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n" + "=" * 80)
    print("üéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 80)
    
    try:
        test = TestFreeUserJourney()
        await test.run_full_journey()
        return True
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def run_premium_user_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n" + "=" * 80)
    print("üéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–õ–ê–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 80)
    
    try:
        test = TestPremiumUserJourney()
        await test.run_full_journey()
        return True
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–õ–ê–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–£–¢–ï–ô")
    print("=" * 80)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    free_result = await run_free_user_test()
    results.append(("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", free_result))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    premium_result = await run_premium_user_test()
    results.append(("–ü–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", premium_result))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("=" * 80)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 80)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 80)
    
    return all_passed

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 