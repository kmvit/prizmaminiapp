#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π enum –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
from pathlib import Path

def fix_enum_values():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è enum –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    db_path = Path("data/bot.db")
    
    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum –¥–ª—è ReportGenerationStatus
        enum_updates = [
            ("pending", "PENDING"),
            ("processing", "PROCESSING"),
            ("completed", "COMPLETED"),
            ("failed", "FAILED")
        ]
        
        for old_value, new_value in enum_updates:
            # –û–±–Ω–æ–≤–ª—è–µ–º free_report_status
            cursor.execute(
                "UPDATE users SET free_report_status = ? WHERE free_report_status = ?",
                (new_value, old_value)
            )
            updated_free = cursor.rowcount
            
            # –û–±–Ω–æ–≤–ª—è–µ–º premium_report_status
            cursor.execute(
                "UPDATE users SET premium_report_status = ? WHERE premium_report_status = ?",
                (new_value, old_value)
            )
            updated_premium = cursor.rowcount
            
            if updated_free > 0 or updated_premium > 0:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_free + updated_premium} –∑–∞–ø–∏—Å–µ–π: {old_value} -> {new_value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π enum –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        cursor.execute("SELECT DISTINCT free_report_status, premium_report_status FROM users")
        current_values = cursor.fetchall()
        print("\nüìã –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for free_status, premium_status in current_values:
            print(f"  - free_report_status: {free_status}")
            print(f"  - premium_report_status: {premium_status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π enum: {e}")
        return False
        
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    fix_enum_values() 