#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PRIZMA
–ó–∞–ø—É—Å–∫: python -m bot.database.seed_data
"""

import asyncio
import json
from pathlib import Path
from sqlalchemy import delete
from bot.database.database import init_db, async_session
from bot.database.models import Question, QuestionType

async def load_questions():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    json_path = Path(__file__).parent.parent.parent / "data" / "questions.json"
    
    print("üî¨ PRIZMA - –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º JSON
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        questions_data = data["questions"]
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(questions_data)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ JSON —Ñ–∞–π–ª–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return
    
    async with async_session() as session:
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            await session.execute(delete(Question))
            print("üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            free_count = 0
            paid_count = 0
            
            for q_data in questions_data:
                question_type = QuestionType.FREE if q_data["type"] == "FREE" else QuestionType.PAID
                
                question = Question(
                    text=q_data["text"],
                    type=question_type,
                    order_number=q_data["order_number"],
                    allow_voice=q_data.get("allow_voice", True),
                    max_length=q_data.get("max_length", 1000)
                )
                session.add(question)
                
                if question_type == QuestionType.FREE:
                    free_count += 1
                else:
                    paid_count += 1
            
            await session.commit()
            
            print("‚úÖ –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            print(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_count}")
            print(f"üíé –ü–ª–∞—Ç–Ω—ã—Ö: {paid_count}")
            print(f"üìù –í—Å–µ–≥–æ: {len(questions_data)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            await session.rollback()

async def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    print("üìä –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    await load_questions()
    print("üéâ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    asyncio.run(main()) 