import asyncio
import httpx
from typing import List, Dict
from datetime import datetime

from bot.config import settings, PERPLEXITY_ENABLED
from bot.database.models import User, Answer, Question

from bot.prompts.base import BasePrompts
from bot.prompts.psychology import PsychologyPrompts
from bot.prompts.premium_new import PremiumPromptsNew
from .pdf_service import ReportGenerator


class PerplexityAIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Perplexity AI"""

    def __init__(self):
        self.api_key = settings.PERPLEXITY_API_KEY
        self.model = settings.PERPLEXITY_MODEL
        self.api_url = "https://api.perplexity.ai/chat/completions"

        if not self.api_key:
            raise ValueError("PERPLEXITY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

    def _prepare_user_data(self, user: User, questions: List[Question], answers: List[Answer]) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        qa_pairs = []
        answer_dict = {ans.question_id: ans for ans in answers}

        for question in questions:
            answer = answer_dict.get(question.id)
            if answer and answer.text_answer:
                qa_pairs.append(f"""
                    –í–æ–ø—Ä–æ—Å {question.order_number}: {question.text}
                    –û—Ç–≤–µ—Ç: {answer.text_answer}
                    """)

        return "\n".join(qa_pairs)

    async def _make_api_request(self, messages: List[Dict], is_premium: bool = False, retry_count: int = 3) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity API —Å retry –ª–æ–≥–∏–∫–æ–π"""

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "PRIZMA-AI-Psychologist/1.0"
        }

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º max_tokens - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏–∑–∞
        if is_premium:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            max_tokens = 12000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-10 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑
        else:
            max_tokens = 4000

        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": max_tokens, 
            "temperature": 0.6,  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é
            "stream": False
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        if is_premium:
            print(f"üîß API –∑–∞–ø—Ä–æ—Å: max_tokens={max_tokens}")
            estimated_input_tokens = self._estimate_token_count(''.join([msg.get('content', '') for msg in messages]))
            print(f"üîß –û—Ü–µ–Ω–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {estimated_input_tokens}")

        # Retry –ª–æ–≥–∏–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        for attempt in range(retry_count):
            try:
                async with httpx.AsyncClient(timeout=600.0) as client:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 10 –º–∏–Ω—É—Ç
                    response = await client.post(
                        self.api_url,
                        headers=headers,
                        json=payload
                    )

                    if response.status_code != 200:
                        error_msg = f"API Error {response.status_code}: {response.text}"
                        print(f"‚ùå {error_msg}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ rate limiting, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                        if response.status_code == 429:
                            wait_time = (2 ** attempt) * 10  # 10, 20, 40 —Å–µ–∫—É–Ω–¥
                            print(f"‚è≥ Rate limit, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            raise Exception(error_msg)

                    result = response.json()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                    if "choices" in result and len(result["choices"]) > 0:
                        content = result["choices"][0]["message"]["content"]
                        usage = result.get("usage", {})
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
                        if is_premium and len(content.strip()) < 200:
                            error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –≤–µ—Ä–Ω—É–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç ({len(content.strip())} —Å–∏–º–≤–æ–ª–æ–≤). –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
                            print(error_msg)
                            print(f"üîß –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {content[:200]}...")
                            raise ValueError(error_msg)
                                                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
                        if is_premium:
                            content_length = len(content)
                            finish_reason = result["choices"][0].get("finish_reason", "unknown")
                            print(f"üîß API –æ—Ç–≤–µ—Ç: {content_length} —Å–∏–º–≤–æ–ª–æ–≤, finish_reason='{finish_reason}'")
                            if usage:
                                print(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {usage}")
                            
                            if attempt > 0:
                                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ {attempt + 1} –ø–æ–ø—ã—Ç–æ–∫")

                        return {
                            "content": content,
                            "usage": usage
                        }
                    else:
                        raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                        
            except (httpx.RemoteProtocolError, httpx.ReadTimeout, httpx.ConnectError) as e:
                wait_time = (2 ** attempt) * 5  # 5, 10, 20 —Å–µ–∫—É–Ω–¥
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                
                if attempt < retry_count - 1:
                    print(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(wait_time)
                else:
                    print(f"‚ùå –í—Å–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    raise e
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise e

    async def analyze_user_responses(self, user: User, questions: List[Question], answers: List[Answer]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Perplexity AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_data = self._prepare_user_data(user, questions, answers)

        try:
            print(
                f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")

            # 1Ô∏è‚É£ –≠–¢–ê–ü: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è conversation —Å –±–∞–∑–æ–≤–æ–π —Ä–æ–ª—å—é
            conversation = []

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞
            conversation.append({
                "role": "system",
                "content": BasePrompts.get_common_context()
            })

            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            conversation.append({
                "role": "user",
                "content": f"""–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

{user_data}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏—Ç–µ —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –í–ê–ñ–ù–û: –í –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —á–µ–ª–æ–≤–µ–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ "–í–´", "–í–ê–®–ò", "–í–ê–ú" - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–∫–ª–∏–µ–Ω—Ç"."""
            })

            # 2Ô∏è‚É£ –≠–¢–ê–ü: –ü–µ—Ä–≤–∏—á–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            print(f"üîÑ –≠—Ç–∞–ø 1: –ò–ò –∏–∑—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã...")
            initial_response = await self._make_api_request(conversation)

            conversation.append({
                "role": "assistant",
                "content": initial_response["content"]
            })

            print(
                f"üìù –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω: {len(initial_response['content'])} —Å–∏–º–≤–æ–ª–æ–≤")

            # 3Ô∏è‚É£ –≠–¢–ê–ü: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            results = {}
            page_names = {
                "page3": "–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏",
                "page4": "–ú—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏—è",
                "page5": "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"
            }

            for i, page_type in enumerate(["page3", "page4", "page5"]):
                print(
                    f"üîÑ –≠—Ç–∞–ø {len(results) + 2}: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{page_names[page_type]}'...")

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page_prompt = self._get_page_specific_prompt(page_type)
                conversation.append({
                    "role": "user",
                    "content": page_prompt
                })

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                page_response = await self._make_api_request(conversation)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < 2:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (page5)
                    wait_time = 5  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    print(f"‚è≥ –ü–∞—É–∑–∞ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API...")
                    await asyncio.sleep(wait_time)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results[page_type] = page_response

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                conversation.append({
                    "role": "assistant",
                    "content": page_response["content"]
                })

                content_length = len(page_response["content"])
                print(
                    f"üìù {page_names[page_type]}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {content_length} —Å–∏–º–≤–æ–ª–æ–≤")

            # 4Ô∏è‚É£ –≠–¢–ê–ü: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            page3_length = len(results["page3"]["content"])
            page4_length = len(results["page4"]["content"])
            page5_length = len(results["page5"]["content"])

            print(
                f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}:")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 (–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏): {page3_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(
                f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 (–ú—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏—è): {page4_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(
                f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 (–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã): {page5_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(
                f"   –û–±—â–∏–π –æ–±—ä–µ–º: {page3_length + page4_length + page5_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(
                f"   üìû –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ò–ò: {len(results) + 1} (1 –ø–µ—Ä–≤–∏—á–Ω—ã–π + 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
            target_min, target_max = 1900, 2000

            for page_type, page_name in page_names.items():
                length = len(results[page_type]["content"])
                if length < target_min:
                    print(
                        f"‚ö†Ô∏è {page_name}: {length} —Å–∏–º–≤–æ–ª–æ–≤ - –ú–ï–ù–¨–®–ï —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({target_min}-{target_max})")
                elif length > target_max:
                    print(
                        f"‚ö†Ô∏è {page_name}: {length} —Å–∏–º–≤–æ–ª–æ–≤ - –ë–û–õ–¨–®–ï —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({target_min}-{target_max})")
                else:
                    print(
                        f"‚úÖ {page_name}: {length} —Å–∏–º–≤–æ–ª–æ–≤ - –í –¶–ï–õ–ï–í–û–ú –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({target_min}-{target_max})")

            return {
                "success": True,
                "page3_analysis": results["page3"]["content"],
                "page4_analysis": results["page4"]["content"],
                "page5_analysis": results["page5"]["content"],
                # –ù–æ–≤–æ–µ: –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                "initial_analysis": initial_response["content"],
                "usage": {
                    "initial": initial_response.get("usage", {}),
                    "page3": results["page3"].get("usage", {}),
                    "page4": results["page4"].get("usage", {}),
                    "page5": results["page5"].get("usage", {})
                },
                "character_stats": {
                    "page3_length": page3_length,
                    "page4_length": page4_length,
                    "page5_length": page5_length,
                    "total_length": page3_length + page4_length + page5_length,
                    "initial_length": len(initial_response["content"]),
                    "context_enabled": True
                },
                "timestamp": datetime.utcnow().isoformat()
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }

    def _get_page_specific_prompt(self, page_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –º–æ–¥—É–ª—è psychology.py"""
        prompts_map = PsychologyPrompts.get_context_prompts_map()
        
        if page_type not in prompts_map:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_type}")
        
        return prompts_map[page_type]()

    async def analyze_premium_responses(self, user: User, questions: List[Question], answers: List[Answer]) -> Dict:
        """–ü–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Perplexity AI (50 –≤–æ–ø—Ä–æ—Å–æ–≤) - –ü–û–°–¢–†–ê–ù–ò–ß–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_data = self._prepare_user_data(user, questions, answers)

        try:
            print(f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–°–¢–†–ê–ù–ò–ß–ù–´–ô –ü–õ–ê–¢–ù–´–ô AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")
            print(f"üìÑ –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 63 —Å—Ç—Ä–∞–Ω–∏—Ü—ã (10+5+7+7+8+6+8+6+6)")

            # 1Ô∏è‚É£ –≠–¢–ê–ü: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è conversation –¢–û–õ–¨–ö–û —Å –±–∞–∑–æ–≤–æ–π —Ä–æ–ª—å—é
            conversation = []

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –±–∞–∑–æ–≤—É—é —Ä–æ–ª—å —ç–∫—Å–ø–µ—Ä—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞ 
            conversation.append({
                "role": "system",
                "content": f"""{PremiumPromptsNew.get_base_prompt()}

–í–ê–ñ–ù–û: –≠—Ç–æ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
            })

            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (50 –≤–æ–ø—Ä–æ—Å–æ–≤)
            conversation.append({
                "role": "user",
                "content": f"""–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü–õ–ê–¢–ù–û–ì–û –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (50 –≤–æ–ø—Ä–æ—Å–æ–≤):

{user_data}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑—É—á–∏—Ç–µ —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ü–õ–ê–¢–ù–û–ì–û –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –í–ê–ñ–ù–û: –í –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —á–µ–ª–æ–≤–µ–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ "–í–´", "–í–ê–®–ò", "–í–ê–ú" - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" –∏–ª–∏ "–∫–ª–∏–µ–Ω—Ç"."""
            })

            # 2Ô∏è‚É£ –≠–¢–ê–ü: –ü–µ—Ä–≤–∏—á–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            print(f"üîÑ –≠—Ç–∞–ø 1: –ò–ò –∏–∑—É—á–∞–µ—Ç 50 –æ—Ç–≤–µ—Ç–æ–≤...")
            initial_response = await self._make_api_request(conversation, is_premium=True)

            conversation.append({
                "role": "assistant",
                "content": initial_response["content"]
            })

            print(f"üìù –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω: {len(initial_response['content'])} —Å–∏–º–≤–æ–ª–æ–≤")

            # 3Ô∏è‚É£ –≠–¢–ê–ü: –ü–û–°–¢–†–ê–ù–ò–ß–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö 63 —Å—Ç—Ä–∞–Ω–∏—Ü
            all_pages = {}
            all_individual_pages = {}  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–∞–º
            page_structure = [
                ("premium_analysis", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç", 10),
                ("premium_strengths", "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã", 5),
                ("premium_growth_zones", "–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞", 7),
                ("premium_compensation", "–ö–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∏–∫–∞", 7),
                ("premium_interaction", "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏", 8),
                ("premium_prognosis", "–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏–∫–∞", 6),
                ("premium_practical", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 8),
                ("premium_conclusion", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", 6),
                ("premium_appendix", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 6)
            ]
            
            page_counter = 1
            total_api_calls = 1  # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            
            for section_key, section_name, page_count in page_structure:
                print(f"\nüîÑ –†–ê–ó–î–ï–õ: {section_name} ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                section_pages = {}
                
                # üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–ú–ü–¢ –†–ê–ó–î–ï–õ–ê –¢–û–õ–¨–ö–û –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
                section_prompt = self._get_section_prompt(section_key)
                conversation.append({
                    "role": "user",
                    "content": f"""–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É "{section_name}". –í–æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:

{section_prompt}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ò–ò
                section_response = await self._make_api_request(conversation, is_premium=True)
                conversation.append({
                    "role": "assistant", 
                    "content": section_response["content"]
                })
                
                print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                total_api_calls += 1
                
                for page_num in range(1, page_count + 1):
                    print(f"üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_counter} ({section_name}, —Å—Ç—Ä. {page_num}/{page_count})...")
                    
                    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É—Ä–µ–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–æ–≤
                    current_tokens = self._estimate_conversation_tokens(conversation)
                    if current_tokens > 50000:  # –£—Ä–µ–∑–∞–µ–º –≥–æ—Ä–∞–∑–¥–æ —Ä–∞–Ω—å—à–µ (~50k —Ç–æ–∫–µ–Ω–æ–≤)
                        conversation = self._trim_conversation_context(conversation, max_tokens=30000)
                        trimmed_tokens = self._estimate_conversation_tokens(conversation)
                        print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Ä–µ–∑–∞–Ω–∏—è: {trimmed_tokens} —Ç–æ–∫–µ–Ω–æ–≤ (–±—ã–ª–æ {current_tokens})")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_prompt, expected_pages = self._get_premium_page_prompt(section_key, page_num, page_count)
                    
                    conversation.append({
                        "role": "user", 
                        "content": page_prompt
                    })
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    page_response = await self._make_api_request(conversation, is_premium=True)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    page_key = f"{section_key}_page_{page_num}"
                    section_pages[page_key] = page_response["content"]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    all_individual_pages[f"page_{page_counter:02d}"] = {
                        "content": page_response["content"],
                        "section": section_name,
                        "section_key": section_key,
                        "page_num": page_num,
                        "global_page": page_counter
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    conversation.append({
                        "role": "assistant",
                        "content": page_response["content"]
                    })
                    
                    page_length = len(page_response["content"])
                    conversation_tokens = self._estimate_conversation_tokens(conversation)
                    print(f"   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_counter}: {page_length} —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: ~{conversation_tokens} —Ç–æ–∫–µ–Ω–æ–≤)")
                    
                    page_counter += 1
                    total_api_calls += 1
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–∞
                all_pages[section_key] = "\n\n".join(section_pages.values())
                section_length = len(all_pages[section_key])
                print(f"üìä {section_name}: {section_length} —Å–∏–º–≤–æ–ª–æ–≤ ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)")

            # 4Ô∏è‚É£ –≠–¢–ê–ü: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_length = sum(len(content) for content in all_pages.values())
            
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–¢–†–ê–ù–ò–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}:")
            for section_key, section_name, page_count in page_structure:
                length = len(all_pages[section_key])
                avg_per_page = length / page_count
                print(f"   {section_name}: {length} —Å–∏–º–≤–æ–ª–æ–≤ ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü, ~{avg_per_page:.0f} —Å–∏–º–≤–æ–ª–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
            print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {total_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìû –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ò–ò: {total_api_calls} (1 –ø–µ—Ä–≤–∏—á–Ω—ã–π + 9 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤ + 63 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
            print(f"   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: 63")
            print(f"   ‚ö° –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ø—Ä–æ–º–ø—Ç—ã —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!")

            return {
                "success": True,
                "premium_analysis": all_pages["premium_analysis"],
                "premium_strengths": all_pages["premium_strengths"],
                "premium_growth_zones": all_pages["premium_growth_zones"],
                "premium_compensation": all_pages["premium_compensation"],
                "premium_interaction": all_pages["premium_interaction"],
                "premium_prognosis": all_pages["premium_prognosis"],
                "premium_practical": all_pages["premium_practical"],
                "premium_conclusion": all_pages["premium_conclusion"],
                "premium_appendix": all_pages["premium_appendix"],
                "individual_pages": all_individual_pages,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                "initial_analysis": initial_response["content"],
                "usage": {
                    "initial": initial_response.get("usage", {}),
                    "total_api_calls": total_api_calls,
                    "pages_generated": 63
                },
                "character_stats": {
                    "total_length": total_length,
                    "initial_length": len(initial_response["content"]),
                    "pages_count": 63,
                    "context_enabled": True,
                    "is_premium": True,
                    "is_paginated": True
                },
                "timestamp": datetime.utcnow().isoformat()
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }

    async def analyze_premium_responses_optimized(self, user: User, questions: List[Question], answers: List[Answer]) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: 9 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 74 —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_data = self._prepare_user_data(user, questions, answers)

        try:
            print(f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")
            print(f"üìÑ –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 63 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞ 9 –∑–∞–ø—Ä–æ—Å–æ–≤")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
            sections = [
                ("premium_analysis", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç", 10),
                ("premium_strengths", "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã", 5),
                ("premium_growth_zones", "–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞", 7),
                ("premium_compensation", "–ö–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∏–∫–∞", 7),
                ("premium_interaction", "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏", 8),
                ("premium_prognosis", "–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏–∫–∞", 6),
                ("premium_practical", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 8),
                ("premium_conclusion", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", 6),
                ("premium_appendix", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 6)
            ]
            
            all_pages = {}
            all_individual_pages = {}
            page_counter = 1
            total_api_calls = 0
            
            for section_key, section_name, page_count in sections:
                print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª: {section_name} ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                print(f"‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                section_prompt = self._create_section_prompt_with_markers(
                    section_key, section_name, page_count, user_data
                )
                
                # –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Å—å —Ä–∞–∑–¥–µ–ª
                start_time = datetime.utcnow()
                response = await self._make_api_request([{
                    "role": "user",
                    "content": section_prompt
                }], is_premium=True)
                end_time = datetime.utcnow()
                
                request_duration = (end_time - start_time).total_seconds()
                print(f"‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {request_duration:.1f} —Å–µ–∫—É–Ω–¥")
                
                total_api_calls += 1
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    section_pages = self._parse_section_response(
                        response["content"], section_key, section_name, page_count, page_counter
                    )
                except ValueError as e:
                    # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
                    print(f"‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '{section_name}': {e}")
                    raise e
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                section_contents = [page_data["content"] for page_data in section_pages.values()]
                all_pages[section_key] = "\n\n".join(section_contents)
                all_individual_pages.update(section_pages)
                
                page_counter += page_count
                
                section_length = len(all_pages[section_key])
                print(f"‚úÖ {section_name}: {section_length} —Å–∏–º–≤–æ–ª–æ–≤ ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if section_key != "premium_appendix":  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª
                    wait_time = 8  # 8 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    print(f"‚è≥ –ü–∞—É–∑–∞ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API...")
                    await asyncio.sleep(wait_time)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_length = sum(len(content) for content in all_pages.values())
            
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}:")
            for section_key, section_name, page_count in sections:
                length = len(all_pages[section_key])
                avg_per_page = length / page_count
                print(f"   {section_name}: {length} —Å–∏–º–≤–æ–ª–æ–≤ ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü, ~{avg_per_page:.0f} —Å–∏–º–≤–æ–ª–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
            print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {total_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìû –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ò–ò: {total_api_calls} (–≤–º–µ—Å—Ç–æ 74!)")
            print(f"   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: 63")
            print(f"   ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: 87% —ç–∫–æ–Ω–æ–º–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤!")

            return {
                "success": True,
                "premium_analysis": all_pages["premium_analysis"],
                "premium_strengths": all_pages["premium_strengths"],
                "premium_growth_zones": all_pages["premium_growth_zones"],
                "premium_compensation": all_pages["premium_compensation"],
                "premium_interaction": all_pages["premium_interaction"],
                "premium_prognosis": all_pages["premium_prognosis"],
                "premium_practical": all_pages["premium_practical"],
                "premium_conclusion": all_pages["premium_conclusion"],
                "premium_appendix": all_pages["premium_appendix"],
                "individual_pages": all_individual_pages,
                "usage": {
                    "total_api_calls": total_api_calls,
                    "pages_generated": 63,
                    "optimization_ratio": "87%"
                },
                "character_stats": {
                    "total_length": total_length,
                    "pages_count": 63,
                    "context_enabled": True,
                    "is_premium": True,
                    "is_optimized": True
                },
                "timestamp": datetime.utcnow().isoformat()
            }

        except (httpx.RemoteProtocolError, httpx.ReadTimeout, httpx.ConnectError) as e:
            print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ API: {e}")
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "timestamp": datetime.utcnow().isoformat()
            }
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "timestamp": datetime.utcnow().isoformat()
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            import traceback
            traceback.print_exc()
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "timestamp": datetime.utcnow().isoformat()
            }

    def _create_section_prompt_with_markers(self, section_key: str, section_name: str, page_count: int, user_data: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–∞
        section_structure = self._get_section_structure(section_key)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        pages_list = []
        for i, subblock in enumerate(section_structure, 1):
            pages_list.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i} ===\n{subblock}")
        
        pages_text = "\n\n".join(pages_list)
        
        prompt = f"""–°–æ–∑–¥–∞–π—Ç–µ –ü–û–õ–ù–´–ô —Ä–∞–∑–¥–µ–ª "{section_name}" ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü).

–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{user_data}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –†–ê–ó–î–ï–õ–ê:
{self._get_section_prompt(section_key)}

–°–¢–†–£–ö–¢–£–†–ê –°–¢–†–ê–ù–ò–¶:
{pages_text}

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–ê–ñ–î–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –î–û–õ–ñ–ù–ê –±—ã—Ç—å 2000-3000 —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2000!)
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ä–∫–µ—Ä—ã === –°–¢–†–ê–ù–ò–¶–ê X === –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
- –û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "–í–´", "–í–ê–®–ò", "–í–ê–ú"
- –ú–∞–∫—Å–∏–º—É–º 2-3 —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
- –°–æ–∑–¥–∞–π—Ç–µ –†–û–í–ù–û {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
- –ù–ï –ü–†–û–ü–£–°–ö–ê–ô–¢–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ù–ï –û–ë–™–ï–î–ò–ù–Ø–ô–¢–ï –∏—Ö!

üìù –§–û–†–ú–ê–¢ –ö–ê–ñ–î–û–ô –°–¢–†–ê–ù–ò–¶–´:
=== –°–¢–†–ê–ù–ò–¶–ê X ===
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)
...

–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞—Ä–∫–µ—Ä–∞ === –°–¢–†–ê–ù–ò–¶–ê 1 === –∏ —Å–æ–∑–¥–∞–π—Ç–µ –í–°–ï {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–∞."""

        return prompt

    def _get_section_structure(self, section_key: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        
        section_subblocks = {
            "premium_analysis": [
                "–ê–ù–ê–õ–ò–ó BIG FIVE (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê MBTI (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)", 
                "–ê–†–•–ï–¢–ò–ü–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô –ü–†–û–§–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–°–ò–°–¢–ï–ú–ê –¶–ï–ù–ù–û–°–¢–ï–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í–ù–´–ô –°–¢–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –î–†–ê–ô–í–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–ï–ù–ï–í–´–ï –ê–°–ü–ï–ö–¢–´ –õ–ò–ß–ù–û–°–¢–ò (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–≠–ö–ó–ò–°–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ò–°–ü–û–õ–ù–ï–ù–ù–û–°–¢–¨ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"
            ],
            "premium_strengths": [
                "–ü–†–ò–†–û–î–ù–´–ï –¢–ê–õ–ê–ù–¢–´ (1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–ò–û–ë–†–ï–¢–Å–ù–ù–´–ï –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–†–ï–°–£–†–°–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–û–¢–ï–ù–¶–ò–ê–õ –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_growth_zones": [
                "–û–ì–†–ê–ù–ò–ß–ò–í–ê–Æ–©–ò–ï –£–ë–ï–ñ–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –£–ë–ï–ñ–î–ï–ù–ò–ô (0.5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–õ–ï–ü–´–ï –ó–û–ù–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–ê–¢–¢–ï–†–ù–´ –°–ê–ú–û–°–ê–ë–û–¢–ê–ñ–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–Ø–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_compensation": [
                "–°–¢–†–ê–¢–ï–ì–ò–ò –†–ê–ó–í–ò–¢–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–¢–ï–•–ù–ò–ö–ò –°–ê–ú–û–†–ï–ì–£–õ–Ø–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò –ü–û–í–ï–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–°–£–†–°–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ü–†–ê–ö–¢–ò–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–û–ë–†–ê–ó–ù–û-–°–ò–ú–í–û–õ–ò–ß–ï–°–ö–ê–Ø –†–ê–ë–û–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_interaction": [
                "–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –°–õ–û–ñ–ù–´–• –°–û–ß–ï–¢–ê–ù–ò–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–ï–•–ù–ò–ö–ò –ê–î–ê–ü–¢–ò–í–ù–û–ô –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–û–õ–¨ –í –ö–û–ú–ê–ù–î–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ë–õ–ò–ó–ö–ò–ï –û–¢–ù–û–®–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ï–ú–ï–ô–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò –ì–†–ê–ù–ò–¶–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_prognosis": [
                "–î–í–£–•–°–¶–ï–ù–ê–†–ù–´–ô –ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–†–ò–ó–ò–°–´ –ò –¢–û–ß–ö–ò –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ê–ú–û–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–î–û–õ–ì–û–°–†–û–ß–ù–´–ï –ü–ï–†–°–ü–ï–ö–¢–ò–í–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_practical": [
                "–ü–†–û–§–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–¨ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–ô (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–°–û–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–í–´–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ó–î–û–†–û–í–¨–ï –ò –ë–õ–ê–ì–û–ü–û–õ–£–ß–ò–ï (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–¢–ï–•–ù–ò–ö–ò –î–õ–Ø –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –î–õ–Ø –ó–û–ù –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ß–ï–ö-–õ–ò–°–¢–´ –ò –¢–†–ï–ö–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_conclusion": [
                "–û–ë–û–ë–©–ï–ù–ò–ï –ò–ù–°–ê–ô–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ò–ù–¢–ï–ó –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–í–û–õ–Æ–¶–ò–Ø –õ–ò–ß–ù–û–°–¢–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_appendix": [
                "–ì–õ–û–°–°–ê–†–ò–ô –¢–ï–†–ú–ò–ù–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–°–£–†–°–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ê–§–§–ò–†–ú–ê–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–®–ê–ë–õ–û–ù–´ –î–õ–Ø –°–ê–ú–û–ê–ù–ê–õ–ò–ó–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–†–û–ï–ö–¢–ò–í–ù–´–ï –û–ë–†–ê–ó–´ –ò –ú–ï–¢–ê–§–û–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ]
        }
        
        return section_subblocks.get(section_key, [])

    def _parse_section_response(self, response_content: str, section_key: str, section_name: str, page_count: int, start_page: int) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º"""
        
        pages = {}
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º === –°–¢–†–ê–ù–ò–¶–ê X ===
        import re
        page_pattern = r'=== –°–¢–†–ê–ù–ò–¶–ê (\d+) ===\s*(.*?)(?=\s*=== –°–¢–†–ê–ù–ò–¶–ê \d+ ===|$)'
        matches = re.findall(page_pattern, response_content, re.DOTALL)
        
        if matches:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for page_num_str, page_content in matches:
                page_num = int(page_num_str)
                global_page = start_page + page_num - 1
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                clean_content = page_content.strip()
                
                if clean_content:
                    page_key = f"page_{global_page:02d}"
                    pages[page_key] = {
                        "content": clean_content,
                        "section": section_name,
                        "section_key": section_key,
                        "page_num": page_num,
                        "global_page": global_page
                    }
                    
                    print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page}: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            print(f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ {page_count} —á–∞—Å—Ç–µ–π")
            content_length = len(response_content)
            part_length = content_length // page_count
            
            for i in range(page_count):
                start_pos = i * part_length
                end_pos = start_pos + part_length if i < page_count - 1 else content_length
                
                page_content = response_content[start_pos:end_pos].strip()
                global_page = start_page + i
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not page_content.startswith('#'):
                    page_content = f"# –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}\n\n{page_content}"
                
                page_key = f"page_{global_page:02d}"
                pages[page_key] = {
                    "content": page_content,
                    "section": section_name,
                    "section_key": section_key,
                    "page_num": i + 1,
                    "global_page": global_page
                }
                
                print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page}: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return pages

    def _get_premium_block_prompt(self, block_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–ª–æ–∫–∞ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        prompts_map = PremiumPromptsNew.get_context_prompts_map()
        
        if block_type not in prompts_map:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞: {block_type}")
        
        return prompts_map[block_type]
    
    def _get_section_prompt(self, section_key: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        
        section_methods = {
            "premium_analysis": PremiumPromptsNew.get_premium_analysis_prompt,
            "premium_strengths": PremiumPromptsNew.get_premium_strengths_prompt,
            "premium_growth_zones": PremiumPromptsNew.get_premium_growth_zones_prompt,
            "premium_compensation": PremiumPromptsNew.get_premium_compensation_prompt,
            "premium_interaction": PremiumPromptsNew.get_premium_interaction_prompt,
            "premium_prognosis": PremiumPromptsNew.get_premium_prognosis_prompt,
            "premium_practical": PremiumPromptsNew.get_premium_practical_prompt,
            "premium_conclusion": PremiumPromptsNew.get_premium_conclusion_prompt,
            "premium_appendix": PremiumPromptsNew.get_premium_appendix_prompt
        }
        
        if section_key not in section_methods:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: {section_key}")
        
        return section_methods[section_key]()
    
    def _extract_page_count_from_description(self, description: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–±–ª–æ–∫–∞"""
        import re
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "(1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)", "(1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)", "(1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"
        patterns = [
            r'\((\d+(?:[,\.]\d+)?)\s*—Å—Ç—Ä–∞–Ω–∏—Ü?\w*\)',  # (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞), (1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            r'\((\d+)-(\d+)\s*—Å—Ç—Ä–∞–Ω–∏—Ü?\w*\)',  # (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        ]
        
        for pattern in patterns:
            match = re.search(pattern, description)
            if match:
                if len(match.groups()) == 1:
                    # –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±—å
                    page_str = match.group(1).replace(',', '.')
                    return float(page_str)
                elif len(match.groups()) == 2:
                    # –î–∏–∞–ø–∞–∑–æ–Ω - –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
                    start = float(match.group(1))
                    end = float(match.group(2))
                    return (start + end) / 2
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return 1.0
    
    def _get_premium_page_prompt(self, section_key: str, page_num: int, total_pages: int):
        """–ü–æ–ª—É—á–∏—Ç—å –ö–†–ê–¢–ö–ò–ô –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏–∑–∞ (–ë–ï–ó –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ø—Ä–æ–º–ø—Ç, –æ–∂–∏–¥–∞–µ–º–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–∞–Ω–∏—Ü)"""
        
        # –ö–∞—Ä—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–¥–±–ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞  
        section_subblocks = {
            "premium_analysis": {
                "name": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç",
                "subblocks": [
                    "–ê–ù–ê–õ–ò–ó BIG FIVE (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê MBTI (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)", 
                    "–ê–†–•–ï–¢–ò–ü–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô –ü–†–û–§–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–°–ò–°–¢–ï–ú–ê –¶–ï–ù–ù–û–°–¢–ï–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í–ù–´–ô –°–¢–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –î–†–ê–ô–í–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–¢–ï–ù–ï–í–´–ï –ê–°–ü–ï–ö–¢–´ –õ–ò–ß–ù–û–°–¢–ò (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–≠–ö–ó–ò–°–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ò–°–ü–û–õ–ù–ï–ù–ù–û–°–¢–¨ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"
                ]
            },
            "premium_strengths": {
                "name": "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã",
                "subblocks": [
                    "–ü–†–ò–†–û–î–ù–´–ï –¢–ê–õ–ê–ù–¢–´ (1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–†–ï–î–†–ê–°–ü–û–õ–û–ñ–ï–ù–ù–û–°–¢–ò –ö –û–ü–†–ï–î–ï–õ–Å–ù–ù–´–ú –û–ë–õ–ê–°–¢–Ø–ú (0,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–†–ò–û–ë–†–ï–¢–Å–ù–ù–´–ï –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–†–ï–°–£–†–°–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–û–¢–ï–ù–¶–ò–ê–õ –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_growth_zones": {
                "name": "–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞",
                "subblocks": [
                    "–û–ì–†–ê–ù–ò–ß–ò–í–ê–Æ–©–ò–ï –£–ë–ï–ñ–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –£–ë–ï–ñ–î–ï–ù–ò–ô (0.5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–õ–ï–ü–´–ï –ó–û–ù–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–ê–¢–¢–ï–†–ù–´ –°–ê–ú–û–°–ê–ë–û–¢–ê–ñ–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–Ø–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_compensation": {
                "name": "–ö–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∏–∫–∞",
                "subblocks": [
                    "–°–¢–†–ê–¢–ï–ì–ò–ò –†–ê–ó–í–ò–¢–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–¢–ï–•–ù–ò–ö–ò –°–ê–ú–û–†–ï–ì–£–õ–Ø–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò –ü–û–í–ï–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–†–ï–°–£–†–°–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ü–†–ê–ö–¢–ò–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–û–ë–†–ê–ó–ù–û-–°–ò–ú–í–û–õ–ò–ß–ï–°–ö–ê–Ø –†–ê–ë–û–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_interaction": {
                "name": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏",
                "subblocks": [
                    "–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –°–õ–û–ñ–ù–´–• –°–û–ß–ï–¢–ê–ù–ò–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–¢–ï–•–ù–ò–ö–ò –ê–î–ê–ü–¢–ò–í–ù–û–ô –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–†–û–õ–¨ –í –ö–û–ú–ê–ù–î–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ë–õ–ò–ó–ö–ò–ï –û–¢–ù–û–®–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–ï–ú–ï–ô–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò –ì–†–ê–ù–ò–¶–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_prognosis": {
                "name": "–ü—Ä–æ–≥–Ω–æ—Å—Ç–∏–∫–∞",
                "subblocks": [
                    "–î–í–£–•–°–¶–ï–ù–ê–†–ù–´–ô –ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ö–†–ò–ó–ò–°–´ –ò –¢–û–ß–ö–ò –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–ê–ú–û–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–î–û–õ–ì–û–°–†–û–ß–ù–´–ï –ü–ï–†–°–ü–ï–ö–¢–ò–í–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_practical": {
                "name": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "subblocks": [
                    "–ü–†–û–§–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–¨ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–ô (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–°–û–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–í–´–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–ó–î–û–†–û–í–¨–ï –ò –ë–õ–ê–ì–û–ü–û–õ–£–ß–ò–ï (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–¢–ï–•–ù–ò–ö–ò –î–õ–Ø –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –î–õ–Ø –ó–û–ù –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ß–ï–ö-–õ–ò–°–¢–´ –ò –¢–†–ï–ö–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_conclusion": {
                "name": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ",
                "subblocks": [
                    "–û–ë–û–ë–©–ï–ù–ò–ï –ò–ù–°–ê–ô–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–°–ò–ù–¢–ï–ó –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–≠–í–û–õ–Æ–¶–ò–Ø –õ–ò–ß–ù–û–°–¢–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            },
            "premium_appendix": {
                "name": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "subblocks": [
                    "–ì–õ–û–°–°–ê–†–ò–ô –¢–ï–†–ú–ò–ù–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–°–£–†–°–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ê–§–§–ò–†–ú–ê–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                    "–®–ê–ë–õ–û–ù–´ –î–õ–Ø –°–ê–ú–û–ê–ù–ê–õ–ò–ó–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                    "–ü–†–û–ï–ö–¢–ò–í–ù–´–ï –û–ë–†–ê–ó–´ –ò –ú–ï–¢–ê–§–û–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
                ]
            }
        }
        
        if section_key not in section_subblocks:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: {section_key}")
            
        if page_num > len(section_subblocks[section_key]["subblocks"]):
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –≤ —Ä–∞–∑–¥–µ–ª–µ {section_key}")
        
        section_name = section_subblocks[section_key]["name"]
        subblock_description = section_subblocks[section_key]["subblocks"][page_num - 1]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        expected_pages = self._extract_page_count_from_description(subblock_description)
        expected_chars = int(expected_pages * 3000)  # 3000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        prompt = f"""–°–æ–∑–¥–∞–π—Ç–µ –°–¢–†–ê–ù–ò–¶–£ {page_num} –∏–∑ {total_pages}.

üéØ –°–û–î–ï–†–ñ–ê–ù–ò–ï:
{subblock_description}

üö® –û–ë–™–Å–ú: –¢–û–ß–ù–û {expected_chars} —Å–∏–º–≤–æ–ª–æ–≤ (¬±100 –º–∞–∫—Å–∏–º—É–º)

üéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "–í–´", "–í–ê–®–ò", "–í–ê–ú"  
- –ú–∞–∫—Å–∏–º—É–º 2-3 —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {expected_chars} ¬± 100 —Å–∏–º–≤–æ–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞."""

        return prompt, expected_pages

    def _create_section_prompt_with_markers(self, section_key: str, section_name: str, page_count: int, user_data: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–∞
        section_structure = self._get_section_structure(section_key)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        pages_list = []
        for i, subblock in enumerate(section_structure, 1):
            pages_list.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i} ===\n{subblock}")
        
        pages_text = "\n\n".join(pages_list)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        compressed_profile = self._create_compressed_user_profile(user_data)
        
        prompt = f"""–°–æ–∑–¥–∞–π—Ç–µ –ü–û–õ–ù–´–ô —Ä–∞–∑–¥–µ–ª "{section_name}" ({page_count} —Å—Ç—Ä–∞–Ω–∏—Ü).

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{compressed_profile}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –†–ê–ó–î–ï–õ–ê:
{self._get_section_prompt(section_key)}

–°–¢–†–£–ö–¢–£–†–ê –°–¢–†–ê–ù–ò–¶:
{pages_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ~3000 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ä–∫–µ—Ä—ã === –°–¢–†–ê–ù–ò–¶–ê X === –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
- –û–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "–í–´", "–í–ê–®–ò", "–í–ê–ú"
- –ú–∞–∫—Å–∏–º—É–º 2-3 —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
- –°–æ–∑–¥–∞–π—Ç–µ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ

–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞—Ä–∫–µ—Ä–∞ === –°–¢–†–ê–ù–ò–¶–ê 1 === –∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–∞."""

        return prompt

    def _create_compressed_user_profile(self, user_data: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∂–∞—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        characteristics = []
        
        if "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ" in user_data.lower() or "—Å–∞–º" in user_data.lower():
            characteristics.append("–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç")
        if "–ª—é–¥–∏" in user_data.lower() or "–∫–æ–º–∞–Ω–¥–∞" in user_data.lower():
            characteristics.append("—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π")
        if "–∞–Ω–∞–ª–∏–∑" in user_data.lower() or "–ª–æ–≥–∏–∫–∞" in user_data.lower():
            characteristics.append("–∞–Ω–∞–ª–∏—Ç–∏–∫")
        if "—á—É–≤—Å—Ç–≤–∞" in user_data.lower() or "—ç–º–æ—Ü–∏–∏" in user_data.lower():
            characteristics.append("—ç–º–ø–∞—Ç")
        if "–ø–ª–∞–Ω" in user_data.lower() or "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞" in user_data.lower():
            characteristics.append("–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π")
        if "—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ" in user_data.lower() or "–∫–∞—á–µ—Å—Ç–≤–æ" in user_data.lower():
            characteristics.append("–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç")
        if "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ" in user_data.lower() or "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ" in user_data.lower():
            characteristics.append("–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π")
        if "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å" in user_data.lower() or "–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å" in user_data.lower():
            characteristics.append("—Å—Ç–∞–±–∏–ª—å–Ω—ã–π")
        if "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å" in user_data.lower() or "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞" in user_data.lower():
            characteristics.append("–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
        if "—Ä–∞–∑–≤–∏—Ç–∏–µ" in user_data.lower() or "—Ä–æ—Å—Ç" in user_data.lower():
            characteristics.append("—Ä–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è")
        
        if characteristics:
            return f"–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(characteristics[:5])}"
        else:
            return "–ü—Ä–æ—Ñ–∏–ª—å: —Å–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏"

    def _get_section_structure(self, section_key: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        
        section_subblocks = {
            "premium_analysis": [
                "–ê–ù–ê–õ–ò–ó BIG FIVE (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê MBTI (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)", 
                "–ê–†–•–ï–¢–ò–ü–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô –ü–†–û–§–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–°–ò–°–¢–ï–ú–ê –¶–ï–ù–ù–û–°–¢–ï–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í–ù–´–ô –°–¢–ò–õ–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –î–†–ê–ô–í–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–ï–ù–ï–í–´–ï –ê–°–ü–ï–ö–¢–´ –õ–ò–ß–ù–û–°–¢–ò (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–≠–ö–ó–ò–°–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ò–°–ü–û–õ–ù–ï–ù–ù–û–°–¢–¨ (1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"
            ],
            "premium_strengths": [
                "–ü–†–ò–†–û–î–ù–´–ï –¢–ê–õ–ê–ù–¢–´ (1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–ò–û–ë–†–ï–¢–Å–ù–ù–´–ï –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–†–ï–°–£–†–°–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–û–¢–ï–ù–¶–ò–ê–õ –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_growth_zones": [
                "–û–ì–†–ê–ù–ò–ß–ò–í–ê–Æ–©–ò–ï –£–ë–ï–ñ–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –£–ë–ï–ñ–î–ï–ù–ò–ô (0.5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–õ–ï–ü–´–ï –ó–û–ù–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–ê–¢–¢–ï–†–ù–´ –°–ê–ú–û–°–ê–ë–û–¢–ê–ñ–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–Ø–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_compensation": [
                "–°–¢–†–ê–¢–ï–ì–ò–ò –†–ê–ó–í–ò–¢–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–¢–ï–•–ù–ò–ö–ò –°–ê–ú–û–†–ï–ì–£–õ–Ø–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò –ü–û–í–ï–î–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–°–£–†–°–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ü–†–ê–ö–¢–ò–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–û–ë–†–ê–ó–ù–û-–°–ò–ú–í–û–õ–ò–ß–ï–°–ö–ê–Ø –†–ê–ë–û–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_interaction": [
                "–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –°–õ–û–ñ–ù–´–• –°–û–ß–ï–¢–ê–ù–ò–ô (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–¢–ï–•–ù–ò–ö–ò –ê–î–ê–ü–¢–ò–í–ù–û–ô –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–û–õ–¨ –í –ö–û–ú–ê–ù–î–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ë–õ–ò–ó–ö–ò–ï –û–¢–ù–û–®–ï–ù–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ï–ú–ï–ô–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò –ì–†–ê–ù–ò–¶–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_prognosis": [
                "–î–í–£–•–°–¶–ï–ù–ê–†–ù–´–ô –ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ö–†–ò–ó–ò–°–´ –ò –¢–û–ß–ö–ò –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ê–ú–û–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø –ö–ê–ß–ï–°–¢–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–î–û–õ–ì–û–°–†–û–ß–ù–´–ï –ü–ï–†–°–ü–ï–ö–¢–ò–í–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_practical": [
                "–ü–†–û–§–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–¨ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–ô (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–°–û–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–í–´–ö–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–ó–î–û–†–û–í–¨–ï –ò –ë–õ–ê–ì–û–ü–û–õ–£–ß–ò–ï (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–¢–ï–•–ù–ò–ö–ò –î–õ–Ø –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –î–õ–Ø –ó–û–ù –†–û–°–¢–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ß–ï–ö-–õ–ò–°–¢–´ –ò –¢–†–ï–ö–ï–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_conclusion": [
                "–û–ë–û–ë–©–ï–ù–ò–ï –ò–ù–°–ê–ô–¢–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–°–ò–ù–¢–ï–ó –°–ò–õ–¨–ù–´–• –°–¢–û–†–û–ù (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–≠–í–û–õ–Æ–¶–ò–Ø –õ–ò–ß–ù–û–°–¢–ò (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–°–õ–ê–ù–ò–ï (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ],
            "premium_appendix": [
                "–ì–õ–û–°–°–ê–†–ò–ô –¢–ï–†–ú–ò–ù–û–í (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–°–£–†–°–´ (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ò –î–ò–ê–ì–†–ê–ú–ú–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ê–§–§–ò–†–ú–ê–¶–ò–ò (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)",
                "–®–ê–ë–õ–û–ù–´ –î–õ–Ø –°–ê–ú–û–ê–ù–ê–õ–ò–ó–ê (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)",
                "–ü–†–û–ï–ö–¢–ò–í–ù–´–ï –û–ë–†–ê–ó–´ –ò –ú–ï–¢–ê–§–û–†–´ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"
            ]
        }
        
        return section_subblocks.get(section_key, [])

    def _parse_section_response(self, response_content: str, section_key: str, section_name: str, page_count: int, start_page: int) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º"""
        
        pages = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        total_content_length = len(response_content.strip())
        min_expected_length = page_count * 200  # –ú–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        if total_content_length < min_expected_length:
            error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–ò –≤–µ—Ä–Ω—É–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section_name}'. –ü–æ–ª—É—á–µ–Ω–æ {total_content_length} —Å–∏–º–≤–æ–ª–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {min_expected_length} —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
            print(error_msg)
            raise ValueError(error_msg)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º === –°–¢–†–ê–ù–ò–¶–ê X ===
        import re
        page_pattern = r'=== –°–¢–†–ê–ù–ò–¶–ê (\d+) ===\s*(.*?)(?=\s*=== –°–¢–†–ê–ù–ò–¶–ê \d+ ===|$)'
        matches = re.findall(page_pattern, response_content, re.DOTALL)
        
        if matches:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for page_num_str, page_content in matches:
                page_num = int(page_num_str)
                global_page = start_page + page_num - 1
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                clean_content = page_content.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if len(clean_content) < 200:
                    error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤). –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                    print(error_msg)
                    raise ValueError(error_msg)
                
                if clean_content:
                    page_key = f"page_{global_page:02d}"
                    pages[page_key] = {
                        "content": clean_content,
                        "section": section_name,
                        "section_key": section_key,
                        "page_num": page_num,
                        "global_page": global_page
                    }
                    
                    print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page}: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            print(f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ {page_count} —á–∞—Å—Ç–µ–π")
            content_length = len(response_content)
            part_length = content_length // page_count
            
            for i in range(page_count):
                start_pos = i * part_length
                end_pos = start_pos + part_length if i < page_count - 1 else content_length
                
                page_content = response_content[start_pos:end_pos].strip()
                global_page = start_page + i
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if len(page_content) < 200:
                    error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤). –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                    print(error_msg)
                    raise ValueError(error_msg)
                
                page_key = f"page_{global_page:02d}"
                pages[page_key] = {
                    "content": page_content,
                    "section": section_name,
                    "section_key": section_key,
                    "page_num": i + 1,
                    "global_page": global_page
                }
                
                print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {global_page}: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return pages

    def _estimate_token_count(self, text: str) -> int:
        """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)"""
        return len(text) // 3  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    def _estimate_conversation_tokens(self, conversation: List[Dict]) -> int:
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"""
        total_chars = 0
        for message in conversation:
            total_chars += len(message.get("content", ""))
        return total_chars // 3  # –ü—Ä—è–º–æ–π –ø–æ–¥—Å—á–µ—Ç: ~3 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
    
    def _trim_conversation_context(self, conversation: List[Dict], max_tokens: int = 30000) -> List[Dict]:
        """–£—Ä–µ–∑–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã –ø–æ –ª–∏–º–∏—Ç—É —Ç–æ–∫–µ–Ω–æ–≤"""
        
        current_tokens = self._estimate_conversation_tokens(conversation)
        
        if current_tokens <= max_tokens:
            return conversation
            
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if len(conversation) <= 3:
            return conversation
            
        preserved_messages = conversation[:3]
        remaining_messages = conversation[3:]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –ø–∞—Ä—ã (user –∑–∞–ø—Ä–æ—Å + assistant –æ—Ç–≤–µ—Ç)
        pairs = []
        for i in range(0, len(remaining_messages), 2):
            if i + 1 < len(remaining_messages):
                pair = [remaining_messages[i], remaining_messages[i + 1]]
                pair_tokens = self._estimate_token_count(pair[0].get("content", "") + pair[1].get("content", ""))
                pairs.append((pair, pair_tokens))
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä—ã, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏–º–∏—Ç
        kept_pairs = []
        current_size = self._estimate_conversation_tokens(preserved_messages)
        
        for pair, pair_tokens in reversed(pairs):
            if current_size + pair_tokens <= max_tokens:
                kept_pairs.insert(0, pair)
                current_size += pair_tokens
            else:
                break
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        trimmed_conversation = preserved_messages[:]
        for pair in kept_pairs:
            trimmed_conversation.extend(pair)
        
        final_tokens = self._estimate_conversation_tokens(trimmed_conversation)
        print(f"üîÑ –£—Ä–µ–∑–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {current_tokens} ‚Üí {final_tokens} —Ç–æ–∫–µ–Ω–æ–≤ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(kept_pairs)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        
        return trimmed_conversation


class AIAnalysisService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        self.perplexity_enabled = PERPLEXITY_ENABLED

        if self.perplexity_enabled:
            try:
                self.ai_service = PerplexityAIService()
            except Exception as e:
                print(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Perplexity AI (–æ—Ç–∫–ª—é—á–∞–µ–º): {e}")
                self.perplexity_enabled = False
                self.ai_service = None
        else:
            self.ai_service = None

        self.report_generator = ReportGenerator()

    async def generate_psychological_report(self, user: User, questions: List[Question], answers: List[Answer]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ç—Ä–µ–º—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""

        try:
            if self.perplexity_enabled and self.ai_service:
                # üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–∞–º—è—Ç—å—é (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
                print(
                    f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")
                analysis_result = await self.ai_service.analyze_user_responses(user, questions, answers)

                if not analysis_result.get("success"):
                    print(f"‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–µ–Ω, —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞")
                    analysis_result = self._create_fallback_analysis()
            else:
                print(
                    f"‚ÑπÔ∏è Perplexity AI –æ—Ç–∫–ª—é—á–µ–Ω, —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                analysis_result = self._create_fallback_analysis()

            # –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç
            print(f"üìÑ –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç...")
            report_filepath = self.report_generator.create_pdf_report(
                user, analysis_result)

            print(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {report_filepath}")

            return {
                "success": True,
                "page3_analysis": analysis_result["page3_analysis"],
                "page4_analysis": analysis_result["page4_analysis"],
                "page5_analysis": analysis_result["page5_analysis"],
                "report_file": report_filepath,
                "usage": analysis_result.get("usage", {}),
                "character_stats": analysis_result.get("character_stats", {}),
                "timestamp": analysis_result["timestamp"]
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "stage": "general"
            }

    def _create_fallback_analysis(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ò–ò"""
        timestamp = datetime.utcnow().isoformat()

        # –°–æ–∑–¥–∞–µ–º fallback —Ç–µ–∫—Å—Ç—ã
        page3_analysis = "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–∏. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        page4_analysis = "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
        page5_analysis = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç—á–µ—Ç–∞."

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞
        page3_length = len(page3_analysis)
        page4_length = len(page4_analysis)
        page5_length = len(page5_analysis)

        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ú–í–û–õ–û–í –¥–ª—è fallback –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 (–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏): {page3_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 (–ú—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏—è): {page4_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(
            f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 (–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã): {page5_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(
            f"   –û–±—â–∏–π –æ–±—ä–µ–º: {page3_length + page4_length + page5_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∞–Ω–∞–ª–∏–∑")

        return {
            "success": True,
            "page3_analysis": page3_analysis,
            "page4_analysis": page4_analysis,
            "page5_analysis": page5_analysis,
            "usage": {},
            "character_stats": {
                "page3_length": page3_length,
                "page4_length": page4_length,
                "page5_length": page5_length,
                "total_length": page3_length + page4_length + page5_length,
                "is_fallback": True
            },
            "timestamp": timestamp
        }

    async def generate_premium_report(self, user: User, questions: List[Question], answers: List[Answer]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (50 –≤–æ–ø—Ä–æ—Å–æ–≤) - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""

        try:
            if not self.perplexity_enabled or not self.ai_service:
                print(f"‚ùå Perplexity AI –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç")
                return {
                    "success": False,
                    "error": "Perplexity AI –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.",
                    "stage": "initialization"
                }

            # üß† –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: 9 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 74
            print(f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–õ–ê–¢–ù–´–ô AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")
            analysis_result = await self.ai_service.analyze_premium_responses_optimized(user, questions, answers)

            if not analysis_result.get("success"):
                error_msg = analysis_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                print(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–µ–Ω: {error_msg}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç)
                if "–∫–æ—Ä–æ—Ç–∫–∏–π" in error_msg.lower() or "–∫–æ—Ä–æ—Ç–∫–∞—è" in error_msg.lower():
                    return {
                        "success": False,
                        "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. {error_msg}",
                        "stage": "ai_validation"
                    }
                else:
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}",
                        "stage": "ai_analysis"
                    }

            # –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç (–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            print(f"üìÑ –°–æ–∑–¥–∞–µ–º –ü–õ–ê–¢–ù–´–ô PDF –æ—Ç—á–µ—Ç...")
            report_filepath = self.report_generator.create_premium_pdf_report(user, analysis_result)

            print(f"‚úÖ –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {report_filepath}")

            return {
                "success": True,
                "premium_analysis": analysis_result["premium_analysis"],
                "premium_strengths": analysis_result["premium_strengths"],
                "premium_growth_zones": analysis_result["premium_growth_zones"],
                "premium_compensation": analysis_result["premium_compensation"],
                "premium_interaction": analysis_result["premium_interaction"],
                "premium_prognosis": analysis_result["premium_prognosis"],
                "premium_practical": analysis_result["premium_practical"],
                "premium_conclusion": analysis_result["premium_conclusion"],
                "premium_appendix": analysis_result["premium_appendix"],
                "report_file": report_filepath,
                "usage": analysis_result.get("usage", {}),
                "character_stats": analysis_result.get("character_stats", {}),
                "timestamp": analysis_result["timestamp"]
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "stage": "premium"
            }


