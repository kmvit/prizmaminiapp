"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤
"""

import os
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
import json

from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.rl_config import defaultEncoding
from reportlab.pdfbase.cidfonts import UnicodeCIDFont

from bot.config import BASE_DIR
from bot.database.models import User, Answer
from loguru import logger


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.reports_dir = BASE_DIR / "reports"
        self.reports_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è ReportLab
        import reportlab.rl_config
        reportlab.rl_config.defaultEncoding = 'utf-8'
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        self.styles = getSampleStyleSheet()
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontName='Times-Bold',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Times
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2E86AB')
        )
        
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading2'],
            fontName='Times-Bold',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Times
            fontSize=16,
            spaceAfter=15,
            spaceBefore=20,
            textColor=colors.HexColor('#A23B72')
        )
        
        self.normal_style = ParagraphStyle(
            'CustomNormal',
            parent=self.styles['Normal'],
            fontName='Times-Roman',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Times
            fontSize=11,
            spaceAfter=10,
            leading=14
        )
        
        # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        self._register_fonts()

    def _register_fonts(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏
            fonts_dir = BASE_DIR / "frontend" / "fonts"
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
            font_files = [
                # DejaVu Sans - –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                ("DejaVuSans.ttf", "DejaVuSans-Bold.ttf", "DejaVu"),
                # Liberation Sans - —Ö–æ—Ä–æ—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                ("LiberationSans-Regular.ttf", "LiberationSans-Bold.ttf", "Liberation"),
                # Roboto - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
                ("Roboto-Regular.ttf", "Roboto-Bold.ttf", "Roboto"),
                # PT Sans - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                ("PTSans-Regular.ttf", "PTSans-Bold.ttf", "PTSans"),
                # Open Sans
                ("OpenSans-Regular.ttf", "OpenSans-Bold.ttf", "OpenSans"),
            ]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
            for regular_file, bold_file, font_name in font_files:
                regular_path = fonts_dir / regular_file
                bold_path = fonts_dir / bold_file
                
                if regular_path.exists():
                    try:
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
                        regular_font = TTFont(f'{font_name}-Regular', str(regular_path))
                        pdfmetrics.registerFont(regular_font)
                        
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
                        bold_font_name = f'{font_name}-Bold'
                        if bold_path.exists():
                            bold_font = TTFont(bold_font_name, str(bold_path))
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∂–∏—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π
                            bold_font = TTFont(bold_font_name, str(regular_path))
                        
                        pdfmetrics.registerFont(bold_font)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                        self.title_style.fontName = bold_font_name
                        self.heading_style.fontName = bold_font_name  
                        self.normal_style.fontName = f'{font_name}-Regular'
                        
                        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_name} ({regular_path})")
                        return
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å {regular_path}: {e}")
                        continue
            
            # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã –≤ –ø–∞–ø–∫–µ frontend/fonts/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ")
            self._use_builtin_fonts()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            self._use_builtin_fonts()

    def _use_builtin_fonts(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Helvetica –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
            self.title_style.fontName = 'Helvetica-Bold'
            self.heading_style.fontName = 'Helvetica-Bold'
            self.normal_style.fontName = 'Helvetica'
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Helvetica")
            logger.info("üí° –î–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å:")
            logger.info("   - DejaVu Sans: https://dejavu-fonts.github.io/")
            logger.info("   - PT Sans: https://fonts.google.com/specimen/PT+Sans") 
            logger.info("   - Roboto: https://fonts.google.com/specimen/Roboto")
            logger.info("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ TTF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É frontend/fonts/")
        except:
            # Fallback –∫ Times
            self.title_style.fontName = 'Times-Bold'
            self.heading_style.fontName = 'Times-Bold'
            self.normal_style.fontName = 'Times-Roman'
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Times")
            logger.info("üí° –î–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å:")
            logger.info("   - DejaVu Sans: https://dejavu-fonts.github.io/")
            logger.info("   - PT Sans: https://fonts.google.com/specimen/PT+Sans") 
            logger.info("   - Roboto: https://fonts.google.com/specimen/Roboto")
            logger.info("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ TTF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É frontend/fonts/")

    def _safe_text(self, text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        if not text:
            return ""
        
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç –≤ UTF-8
            if isinstance(text, bytes):
                text = text.decode('utf-8', errors='replace')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º unicode
            import unicodedata
            text = unicodedata.normalize('NFC', text)
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = text.replace('\n', '<br/>')
            text = text.replace('\r', '')
            text = text.replace('\t', ' ')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            text = text.replace('&', '&amp;')
            text = text.replace('<', '&lt;')
            text = text.replace('>', '&gt;')
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞—à–∏ br —Ç–µ–≥–∏
            text = text.replace('&lt;br/&gt;', '<br/>')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_chars = []
            for char in text:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                    char.encode('utf-8')
                    safe_chars.append(char)
                except UnicodeEncodeError:
                    safe_chars.append('?')
            
            result = ''.join(safe_chars)
            return result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞: {e}")
            # Fallback - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                return str(text).encode('utf-8', errors='replace').decode('utf-8')
            except:
                return "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"

    async def generate_report(self, user: User, answers: List[Answer]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"prizma_report_{user.telegram_id}_{timestamp}.pdf"
            filepath = self.reports_dir / filename
            
            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(
                str(filepath),
                pagesize=A4,
                rightMargin=50,
                leftMargin=50,
                topMargin=50,
                bottomMargin=50
            )
            
            # –°—Ç—Ä–æ–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            story = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph(self._safe_text("–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê –õ–ò–ß–ù–û–°–¢–ò"), self.title_style))
            story.append(Spacer(1, 20))
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            story.extend(self._build_user_info(user, answers))
            story.append(Spacer(1, 30))
            
            # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
            story.extend(self._build_summary(user, answers))
            story.append(Spacer(1, 20))
            
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
            story.extend(self._build_answers_analysis(answers))
            story.append(Spacer(1, 20))
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            story.extend(self._build_recommendations(user, answers))
            story.append(Spacer(1, 20))
            
            # –§—É—Ç–µ—Ä
            story.extend(self._build_footer())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            doc.build(story)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filename}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            raise

    def _build_user_info(self, user: User, answers: List[Answer]) -> List:
        """–ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        content = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = self._get_user_display_name(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        age_display = self._get_user_age_display(user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª
        gender_display = self._get_user_gender_display(user)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
        answer_count = f"{len(answers)} –∏–∑ {15 if not user.is_paid else 50} –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        data = [
            [self._safe_text('–ò–º—è:'), self._safe_text(user_name)],
            [self._safe_text('–í–æ–∑—Ä–∞—Å—Ç:'), self._safe_text(age_display)],
            [self._safe_text('–ü–æ–ª:'), self._safe_text(gender_display)],
            [self._safe_text('–û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ:'), self._safe_text(answer_count)],
            [self._safe_text('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:'), self._safe_text(datetime.now().strftime("%d %B %Y"))],
            [self._safe_text('–í–µ—Ä—Å–∏—è –æ—Ç—á—ë—Ç–∞:'), self._safe_text('–ë–∞–∑–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (15 –≤–æ–ø—Ä–æ—Å–æ–≤)' if not user.is_paid else '–ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (50 –≤–æ–ø—Ä–æ—Å–æ–≤)')],
            [self._safe_text('–°–µ—Ä–≤–∏—Å:'), self._safe_text('PRIZMA ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑')],
        ]
        
        table = Table(data, colWidths=[2*inch, 4*inch])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), self.heading_style.fontName),
            ('FONTNAME', (1, 0), (1, -1), self.normal_style.fontName),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ]))
        
        content.append(table)
        return content

    def _get_user_display_name(self, user: User) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: name (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ) -> first_name + last_name -> first_name -> telegram_id
        if user.name and user.name.strip():
            return user.name.strip()
        
        full_name_parts = []
        if user.first_name and user.first_name.strip():
            full_name_parts.append(user.first_name.strip())
        if user.last_name and user.last_name.strip():
            full_name_parts.append(user.last_name.strip())
        
        if full_name_parts:
            return " ".join(full_name_parts)
        
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}"

    def _get_user_age_display(self, user: User) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user.age and isinstance(user.age, int) and user.age > 0:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            if user.age % 10 == 1 and user.age % 100 != 11:
                return f"{user.age} –≥–æ–¥"
            elif user.age % 10 in [2, 3, 4] and user.age % 100 not in [12, 13, 14]:
                return f"{user.age} –≥–æ–¥–∞"
            else:
                return f"{user.age} –ª–µ—Ç"
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

    def _get_user_gender_display(self, user: User) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user.gender and user.gender.strip():
            gender = user.gender.strip().lower()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            if gender in ['–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂', 'male', 'm']:
                return "–ú—É–∂—Å–∫–æ–π"
            elif gender in ['–∂', '–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', 'female', 'f']:
                return "–ñ–µ–Ω—Å–∫–∏–π"
            else:
                return user.gender.capitalize()
        
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

    def _build_summary(self, user: User, answers: List[Answer]) -> List:
        """–ë–ª–æ–∫ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        content = []
        
        content.append(Paragraph(self._safe_text("–ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï"), self.heading_style))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
        summary_text = self._generate_personality_summary(answers)
        content.append(Paragraph(self._safe_text(summary_text), self.normal_style))
        
        return content

    def _build_answers_analysis(self, answers: List[Answer]) -> List:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        content = []
        
        content.append(Paragraph(self._safe_text("–ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –û–¢–í–ï–¢–û–í"), self.heading_style))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i, answer in enumerate(answers, 1):
            content.append(Paragraph(self._safe_text(f"<b>–í–æ–ø—Ä–æ—Å {i}:</b>"), self.normal_style))
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            answer_text = answer.text_answer[:200] + "..." if len(answer.text_answer) > 200 else answer.text_answer
            content.append(Paragraph(self._safe_text(f"–í–∞—à –æ—Ç–≤–µ—Ç: {answer_text}"), self.normal_style))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
            if answer.ai_analysis:
                analysis_text = answer.ai_analysis[:300] + "..." if len(answer.ai_analysis) > 300 else answer.ai_analysis
                content.append(Paragraph(self._safe_text(f"<i>–ê–Ω–∞–ª–∏–∑: {analysis_text}</i>"), self.normal_style))
            
            content.append(Spacer(1, 10))
        
        return content

    def _build_recommendations(self, user: User, answers: List[Answer]) -> List:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        content = []
        
        content.append(Paragraph(self._safe_text("–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"), self.heading_style))
        
        recommendations = [
            "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ - –≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
            "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å - —É–¥–µ–ª—è–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏–º —ç–º–æ—Ü–∏—è–º –∏ —Ä–µ–∞–∫—Ü–∏—è–º", 
            "–°—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ - —Ä–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —à–∞–≥–∏",
            "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —É—á–∏—Ç–µ—Å—å –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –∏ —á—É–∂–∏–µ —ç–º–æ—Ü–∏–∏",
            "–ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –±–∞–ª–∞–Ω—Å–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞ - —ç—Ç–æ –∫–ª—é—á –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É"
        ]
        
        for i, rec in enumerate(recommendations, 1):
            content.append(Paragraph(self._safe_text(f"{i}. {rec}"), self.normal_style))
        
        return content

    def _build_footer(self) -> List:
        """–§—É—Ç–µ—Ä –æ—Ç—á–µ—Ç–∞"""
        content = []
        
        content.append(Spacer(1, 30))
        content.append(Paragraph(self._safe_text("–ü–û–î–î–ï–†–ñ–ö–ê"), self.heading_style))
        content.append(Paragraph(self._safe_text("–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? Telegram: @prizma_support"), self.normal_style))
        content.append(Paragraph(self._safe_text("Email: support@prizma.ai"), self.normal_style))
        content.append(Spacer(1, 20))
        
        footer_text = f"¬© 2025 PRIZMA. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. | –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y, %H:%M')} –ú–°–ö"
        footer_style = ParagraphStyle(
            'Footer',
            parent=self.styles['Normal'],
            fontName=self.normal_style.fontName,
            fontSize=8,
            alignment=TA_CENTER,
            textColor=colors.grey
        )
        content.append(Paragraph(self._safe_text(footer_text), footer_style))
        
        return content

    def _generate_personality_summary(self, answers: List[Answer]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        total_words = sum(len(answer.text_answer.split()) for answer in answers)
        avg_length = total_words / len(answers) if answers else 0
        
        if avg_length > 50:
            detail_level = "–¥–µ—Ç–∞–ª—å–Ω–æ –∏ –≤–¥—É–º—á–∏–≤–æ"
        elif avg_length > 20:
            detail_level = "–æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"
        else:
            detail_level = "–∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É"
            
        summary = f"""
        –í—ã –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã {detail_level}, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞—à–µ–º –ø–æ–¥—Ö–æ–¥–µ –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É. 
        –í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º –∏ 
        —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —á–µ—Å—Ç–Ω–æ–º—É —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å 
        –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º –æ —Å–µ–±–µ.
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é, —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ 
        –æ—Ç–≤–µ—Ç–∞—Ö. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(answers)}) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ 
        —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–æ–ª–Ω–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.
        """
        
        return summary.strip()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
report_generator = ReportGenerator() 