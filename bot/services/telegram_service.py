"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import os
import asyncio
import aiohttp
from pathlib import Path
from typing import Optional, Dict, Any
from bot.config import settings
from bot.utils.logger import get_logger

logger = get_logger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN")
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)
        self.webapp_url = getattr(settings, "WEBAPP_URL", "").rstrip("/") if settings else ""
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–ú–ë) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API
        self.max_document_mb = int(os.getenv("TELEGRAM_MAX_DOCUMENT_MB", "45"))
        
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            self.enabled = False
        else:
            self.enabled = True
            logger.info("‚úÖ Telegram —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Telegram –æ—Ç–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
            
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": parse_mode
                }
                
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                            return True
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
                            return False
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_document(self, chat_id: int, file_path: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª)"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Telegram –æ—Ç–∫–ª—é—á–µ–Ω, –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False
            
        try:
            if not os.path.exists(file_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
                
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendDocument"
                
                with open(file_path, 'rb') as file:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', str(chat_id))
                    data.add_field('document', file, filename=os.path.basename(file_path))
                    if caption:
                        data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get("ok"):
                                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {os.path.basename(file_path)}")
                                return True
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result}")
                                return False
                        else:
                            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status}")
                            return False
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_report_ready_notification(self, telegram_id: int, report_path: str, is_premium: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Telegram –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            report_type = "–ø—Ä–µ–º–∏—É–º" if is_premium else "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
            message = f"""
üéâ –í–∞—à {report_type} –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!

üìÑ –ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç.

üìé –û—Ç—á–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.

üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            """.strip()
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
            try:
                file_size_mb = round(os.path.getsize(report_path) / (1024 * 1024), 2)
            except Exception:
                file_size_mb = 0

            download_url = self._build_download_url(telegram_id, is_premium)

            if file_size_mb >= self.max_document_mb or not download_url:
                if file_size_mb >= self.max_document_mb:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ({file_size_mb} –ú–ë ‚â• {self.max_document_mb} –ú–ë). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                link_message = self._compose_link_message(is_premium, download_url)
                return await self.send_message(telegram_id, link_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            success = await self.send_document(
                chat_id=telegram_id,
                file_path=report_path,
                caption=message
            )
            
            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                return True

            # –§–æ–ª–ª–±—ç–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É")
            link_message = self._compose_link_message(is_premium, download_url)
            return await self.send_message(telegram_id, link_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
            return False

    def _build_download_url(self, telegram_id: int, is_premium: bool) -> str:
        """–°–æ–±—Ä–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            base = self.webapp_url or ""
            if not base:
                return ""
            path = f"/api/download/premium-report/{telegram_id}" if is_premium else f"/api/download/report/{telegram_id}"
            # download=1 –ø—Ä–∏–Ω—É–¥–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ Telegram Web App/–±—Ä–∞—É–∑–µ—Ä–µ
            return f"{base}{path}?download=1"
        except Exception:
            return ""

    def _compose_link_message(self, is_premium: bool, url: str) -> str:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        report_word = "–ü—Ä–µ–º–∏—É–º-–æ—Ç—á–µ—Ç" if is_premium else "–û—Ç—á–µ—Ç"
        link_text = url or "–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
        return (
            f"üéâ <b>{report_word} –≥–æ—Ç–æ–≤!</b>\n\n"
            f"üì• <b>–°–∫–∞—á–∞—Ç—å:</b> {link_text}\n\n"
            f"‚ÑπÔ∏è –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
        )
    
    async def send_error_notification(self, telegram_id: int, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Telegram –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
            
        try:
            message = f"""
‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>

üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.

üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

<i>–û—à–∏–±–∫–∞: {error_message}</i>
            """.strip()
            
            success = await self.send_message(telegram_id, message)
            
            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService()
