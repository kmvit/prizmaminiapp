from fastapi import FastAPI, HTTPException, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
from typing import Optional
from datetime import datetime

from bot.services.database_service import db_service
from bot.config import BASE_DIR, PERPLEXITY_ENABLED
from bot.models.api_models import (
    AnswerRequest, UserProfileUpdate, CurrentQuestionResponse, 
    NextQuestionResponse, UserProgressResponse, UserProfileResponse,
    QuestionResponse, ProgressResponse, UserStatusResponse, ErrorResponse
)
from loguru import logger

# –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
STATIC_DIR = BASE_DIR / "frontend"

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="PRIZMA API",
    description="API –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ API –º–∞—Ä—à—Ä—É—Ç—ã, –∞ –ø–æ—Ç–æ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_current_question(telegram_id: int, question_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from bot.database.database import async_session
    from bot.database.models import User
    from sqlalchemy import update as sql_update
    
    async with async_session() as session:
        stmt = sql_update(User).where(User.telegram_id == telegram_id).values(
            current_question_id=question_id,
            updated_at=datetime.utcnow()
        )
        await session.execute(stmt)
        await session.commit()

@app.get("/api/user/{telegram_id}/current-question", 
         response_model=CurrentQuestionResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")
async def get_current_question(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
        if not user.current_question_id:
            user = await db_service.start_test(telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = await db_service.get_question(user.current_question_id)
        
        if not question:
            raise HTTPException(status_code=404, detail="Question not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_questions = await db_service.get_total_questions(user.is_paid)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        answers = await db_service.get_user_answers(telegram_id)
        answered_count = len(answers)
        
        return CurrentQuestionResponse(
            question=QuestionResponse(
                id=question.id,
                text=question.text,
                order_number=question.order_number,
                type=question.type.value,
                allow_voice=question.allow_voice,
                max_length=question.max_length
            ),
            progress=ProgressResponse(
                current=question.order_number,
                total=total_questions,
                answered=answered_count
            ),
            user=UserStatusResponse(
                is_paid=user.is_paid,
                test_completed=user.test_completed
            )
        )
        
    except Exception as e:
        logger.error(f"Error getting current question: {e}")
        raise HTTPException(status_code=500, detail="Failed to get question")

@app.post("/api/user/{telegram_id}/answer",
          response_model=NextQuestionResponse,
          summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç")
async def save_answer(telegram_id: int, answer_data: AnswerRequest):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    try:
        logger.info(f"üí¨ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id={user.id}, is_paid={user.is_paid}, current_question_id={user.current_question_id}")
        
        if not user.current_question_id:
            logger.error(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            raise HTTPException(status_code=400, detail="No active question")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_question = await db_service.get_question(user.current_question_id)
        
        if not current_question:
            raise HTTPException(status_code=404, detail="Current question not found")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answer = await db_service.save_answer(
            telegram_id=telegram_id,
            question_id=current_question.id,
            text_answer=answer_data.text_answer,
            answer_type=answer_data.answer_type
        )
        
        # Perplexity –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤, –Ω–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
        logger.info(f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç {answer.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ò–ò-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: current_order={current_question.order_number}, is_paid={user.is_paid}")
        next_question = await db_service.get_next_question(
            current_question.id,
            user.is_paid
        )
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {next_question.order_number if next_question else 'None'}")
        
        if next_question:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_current_question(telegram_id, next_question.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            total_questions = await db_service.get_total_questions(user.is_paid)
            answers = await db_service.get_user_answers(telegram_id)
            answered_count = len(answers)
            
            return NextQuestionResponse(
                status="next_question",
                next_question=QuestionResponse(
                    id=next_question.id,
                    text=next_question.text,
                    order_number=next_question.order_number,
                    type=next_question.type.value,
                    allow_voice=next_question.allow_voice,
                    max_length=next_question.max_length
                ),
                progress=ProgressResponse(
                    current=next_question.order_number,
                    total=total_questions,
                    answered=answered_count
                )
            )
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ {current_question.order_number}")
            await db_service.complete_test(telegram_id)
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ - —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å—Å—è –Ω–∞ loading.html
            # import asyncio
            # asyncio.create_task(generate_report_background(telegram_id))
            
            response_data = NextQuestionResponse(
                status="redirect_to_loading",  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ loading.html
                message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç..."
            )
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {response_data.model_dump()}")
            return response_data
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error saving answer: {e}")
        raise HTTPException(status_code=500, detail="Failed to save answer")

@app.get("/api/user/{telegram_id}/progress",
         response_model=UserProgressResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
async def get_user_progress(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        answers = await db_service.get_user_answers(telegram_id)
        total_questions = await db_service.get_total_questions(user.is_paid)
        
        return UserProgressResponse(
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "is_paid": user.is_paid,
                "test_completed": user.test_completed,
                "test_started_at": user.test_started_at.isoformat() if user.test_started_at else None,
                "test_completed_at": user.test_completed_at.isoformat() if user.test_completed_at else None
            },
            progress={
                "answered": len(answers),
                "total": total_questions,
                "percentage": round((len(answers) / total_questions) * 100, 1) if total_questions > 0 else 0
            },
            answers=[
                {
                    "question_id": ans.question_id,
                    "text_answer": ans.text_answer,
                    "ai_analysis": ans.ai_analysis,
                    "created_at": ans.created_at.isoformat()
                }
                for ans in answers
            ]
        )
        
    except Exception as e:
        logger.error(f"Error getting user progress: {e}")
        raise HTTPException(status_code=500, detail="Failed to get progress")

@app.get("/api/user/{telegram_id}/profile",
         response_model=UserProfileResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def get_user_profile(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è telegram_id: {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.telegram_id}")
        
        return UserProfileResponse(
            status="success",
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "name": user.name,
                "age": user.age,
                "gender": user.gender
            }
        )
        
    except Exception as e:
        logger.error(f"Error getting user profile: {e}")
        raise HTTPException(status_code=500, detail="Failed to get profile")

@app.post("/api/user/{telegram_id}/profile",
          response_model=UserProfileResponse,
          summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          description="–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def update_user_profile(telegram_id: int, profile_data: UserProfileUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è telegram_id: {telegram_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_data}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user.telegram_id}")
        
        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        user = await db_service.update_user_profile(
            telegram_id=telegram_id,
            name=profile_data.name,
            age=profile_data.age,
            gender=profile_data.gender
        )
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: name={user.name}, age={user.age}, gender={user.gender}")
        
        return UserProfileResponse(
            status="success",
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "name": user.name,
                "age": user.age,
                "gender": user.gender
            }
        )
        
    except Exception as e:
        logger.error(f"Error updating user profile: {e}")
        raise HTTPException(status_code=500, detail="Failed to update profile")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
from fastapi.responses import JSONResponse

@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(status_code=404, content={"error": "Not found"})

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    return JSONResponse(status_code=500, content={"error": "Internal server error"})

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/api/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {"status": "ok", "message": "PRIZMA API is running"}

@app.get("/api/info", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": "PRIZMA API",
        "version": "1.0.0",
        "description": "API –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º",
        "features": {
            "perplexity_ai": PERPLEXITY_ENABLED,
            "pdf_generation": True,
            "payments": True
        },
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/api/health"
        }
    }

@app.get("/api/user/{telegram_id}/report-status", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
async def check_report_status(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_report_{telegram_id}_*.pdf"
        
        import glob
        report_files = glob.glob(str(reports_dir / pattern))
        
        if report_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º st_mtime)
            # –ò–º—è —Ñ–∞–π–ª–∞: prizma_report_{telegram_id}_{timestamp}.pdf
            def extract_timestamp(filepath):
                filename = Path(filepath).name
                # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: prizma_report_123456789_20250627_082506.pdf
                parts = filename.split('_')
                if len(parts) >= 5:
                    try:
                        # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: parts[3] = '20250627', parts[4] = '082506.pdf'
                        date_part = parts[3]
                        time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                        timestamp_str = f"{date_part}_{time_part}"
                        return timestamp_str
                    except:
                        return "00000000_000000"
                return "00000000_000000"
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ø–æ timestamp
            latest_report = max(report_files, key=extract_timestamp)
            return {"status": "ready", "message": "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", "report_path": latest_report}
        else:
            return {"status": "not_ready", "message": "–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"}
            
    except Exception as e:
        logger.error(f"Error checking report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞"}

@app.post("/api/user/{telegram_id}/generate-report", summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞")
async def start_report_generation(telegram_id: int):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "error", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        report_path = await generate_report_background(telegram_id)
        
        if report_path:
            return {"status": "success", "message": "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "report_path": report_path}
        else:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"}
            
    except Exception as e:
        logger.error(f"Error starting report generation: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"}

@app.get("/api/download/report/{telegram_id}", summary="–°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def download_personal_report(telegram_id: int, download: Optional[str] = None, method: Optional[str] = None, t: Optional[str] = None):
    """–°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from fastapi.responses import FileResponse
    import os
    import glob
    
    try:
        logger.info(f"üìÅ –ó–∞–ø—Ä–æ—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: download={download}, method={method}, t={t}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç")
            raise HTTPException(status_code=400, detail="–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        
        # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_report_{telegram_id}_*.pdf"
        report_files = glob.glob(str(reports_dir / pattern))
        
        if not report_files:
            logger.warning(f"‚ö†Ô∏è –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await generate_report_background(telegram_id)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                report_files = glob.glob(str(reports_dir / pattern))
                if not report_files:
                    logger.error(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        def extract_timestamp(filepath):
            filename = Path(filepath).name
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: prizma_report_123456789_20250627_082506.pdf
            parts = filename.split('_')
            if len(parts) >= 5:
                try:
                    # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: parts[3] = '20250627', parts[4] = '082506.pdf'
                    date_part = parts[3]
                    time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                    timestamp_str = f"{date_part}_{time_part}"
                    return timestamp_str
                except:
                    pass
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å timestamp, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ fallback
            return str(int(Path(filepath).stat().st_mtime))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–ø–æ—Å–ª–µ–¥–Ω–∏–π –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º) –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        report_files.sort(key=extract_timestamp, reverse=True)
        latest_report = report_files[0]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}")
        logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {latest_report}")
        for i, report in enumerate(report_files[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"   {i+1}. {Path(report).name} (timestamp: {extract_timestamp(report)})")
        
        if not os.path.exists(latest_report):
            logger.error(f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {latest_report}")
            raise HTTPException(status_code=500, detail="–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        logger.info(f"üìÑ –û—Ç–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {latest_report}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(latest_report)} –±–∞–π—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        headers = {}
        
        # –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑ Telegram Web App)
        if download == "1":
            headers["Content-Disposition"] = f'attachment; filename="prizma-report-{telegram_id}.pdf"'
            headers["Content-Type"] = "application/pdf"
            headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            headers["Pragma"] = "no-cache"
            headers["Expires"] = "0"
            logger.info("üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è Telegram Web App")
        else:
            # –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers["Content-Disposition"] = f'inline; filename="prizma-report-{telegram_id}.pdf"'
            logger.info("üåê –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=latest_report,
            media_type='application/pdf',
            filename=f"prizma-report-{telegram_id}.pdf",
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading report: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
async def generate_report_background(telegram_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        answers = await db_service.get_user_answers(telegram_id)
        questions = await db_service.get_questions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        from bot.services.perplexity import AIAnalysisService
        ai_service = AIAnalysisService()
        
        result = await ai_service.generate_psychological_report(user, questions, answers)
        
        if result.get("success"):
            report_path = result['report_file']
            logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {report_path}")
            return report_path
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result.get('error')}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

# –ü–õ–ê–¢–ù–ê–Ø –í–ï–†–°–ò–Ø - –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/api/user/{telegram_id}/premium-report-status", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
async def check_premium_report_status(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_premium_report_{telegram_id}_*.pdf"
        
        import glob
        report_files = glob.glob(str(reports_dir / pattern))
        
        if report_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            def extract_timestamp(filepath):
                filename = Path(filepath).name
                parts = filename.split('_')
                if len(parts) >= 5:
                    try:
                        date_part = parts[3]
                        time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                        timestamp_str = f"{date_part}_{time_part}"
                        return timestamp_str
                    except:
                        return "00000000_000000"
                return "00000000_000000"
                
            latest_report = max(report_files, key=extract_timestamp)
            return {"status": "ready", "message": "–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", "report_path": latest_report}
        else:
            return {"status": "not_ready", "message": "–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"}
            
    except Exception as e:
        logger.error(f"Error checking premium report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"}

@app.post("/api/user/{telegram_id}/generate-premium-report", summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
async def start_premium_report_generation(telegram_id: int):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "error", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_path = await generate_premium_report_background(telegram_id)
        
        if report_path:
            return {"status": "success", "message": "–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "report_path": report_path}
        else:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"}
            
    except Exception as e:
        logger.error(f"Error starting premium report generation: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"}

@app.get("/api/download/premium-report/{telegram_id}", summary="–°–∫–∞—á–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def download_premium_personal_report(telegram_id: int, download: Optional[str] = None, method: Optional[str] = None, t: Optional[str] = None):
    """–°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    from fastapi.responses import FileResponse
    import os
    import glob
    
    try:
        logger.info(f"üìÅ –ó–∞–ø—Ä–æ—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: download={download}, method={method}, t={t}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç")
            raise HTTPException(status_code=400, detail="–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        
        # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_premium_report_{telegram_id}_*.pdf"
        report_files = glob.glob(str(reports_dir / pattern))
        
        if not report_files:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await generate_premium_report_background(telegram_id)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                report_files = glob.glob(str(reports_dir / pattern))
                if not report_files:
                    logger.error(f"‚ùå –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        def extract_timestamp(filepath):
            filename = Path(filepath).name
            parts = filename.split('_')
            if len(parts) >= 5:
                try:
                    date_part = parts[3]
                    time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                    timestamp_str = f"{date_part}_{time_part}"
                    return timestamp_str
                except:
                    pass
            return str(int(Path(filepath).stat().st_mtime))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        report_files.sort(key=extract_timestamp, reverse=True)
        latest_report = report_files[0]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}")
        logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: {latest_report}")
        
        if not os.path.exists(latest_report):
            logger.error(f"‚ùå –§–∞–π–ª –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {latest_report}")
            raise HTTPException(status_code=500, detail="–§–∞–π–ª –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        logger.info(f"üìÑ –û—Ç–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: {latest_report}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(latest_report)} –±–∞–π—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        headers = {}
        
        # –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑ Telegram Web App)
        if download == "1":
            headers["Content-Disposition"] = f'attachment; filename="prizma-premium-report-{telegram_id}.pdf"'
            headers["Content-Type"] = "application/pdf"
            headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            headers["Pragma"] = "no-cache"
            headers["Expires"] = "0"
            logger.info("üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram Web App")
        else:
            # –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers["Content-Disposition"] = f'inline; filename="prizma-premium-report-{telegram_id}.pdf"'
            logger.info("üåê –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=latest_report,
            media_type='application/pdf',
            filename=f"prizma-premium-report-{telegram_id}.pdf",
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading premium report: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def generate_premium_report_background(telegram_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        answers = await db_service.get_user_answers(telegram_id)
        questions = await db_service.get_questions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        from bot.services.perplexity import AIAnalysisService
        ai_service = AIAnalysisService()
        
        result = await ai_service.generate_premium_report(user, questions, answers)
        
        if result.get("success"):
            report_path = result['report_file']
            logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {report_path}")
            return report_path
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result.get('error')}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤)
app.mount("/", StaticFiles(directory=STATIC_DIR, html=True), name="static")