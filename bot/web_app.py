from fastapi import FastAPI, HTTPException, Depends, Request, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import os
from typing import Optional
from datetime import datetime
import decimal
import time

from bot.services.database_service import db_service
from bot.config import BASE_DIR, PERPLEXITY_ENABLED, settings
from bot.models.api_models import (
    AnswerRequest, UserProfileUpdate, CurrentQuestionResponse, 
    NextQuestionResponse, UserProgressResponse, UserProfileResponse,
    QuestionResponse, ProgressResponse, UserStatusResponse, ErrorResponse
)
from loguru import logger
from bot.services.oplata import RobokassaService
from bot.database.models import PaymentStatus, ReportGenerationStatus, User

# –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
STATIC_DIR = BASE_DIR / "frontend"

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="PRIZMA API",
    description="API –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ API –º–∞—Ä—à—Ä—É—Ç—ã, –∞ –ø–æ—Ç–æ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_current_question(telegram_id: int, question_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from bot.database.database import async_session
    from bot.database.models import User
    from sqlalchemy import update as sql_update
    
    async with async_session() as session:
        stmt = sql_update(User).where(User.telegram_id == telegram_id).values(
            current_question_id=question_id,
            updated_at=datetime.utcnow()
        )
        await session.execute(stmt)
        await session.commit()

@app.get("/api/user/{telegram_id}/current-question", 
         response_model=CurrentQuestionResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")
async def get_current_question(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
        if not user.current_question_id:
            # –î–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç—ã
            if user.is_paid:
                answers = await db_service.get_user_answers(telegram_id)
                if answers:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã, –Ω–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
                    answered_questions = []
                    for answer in answers:
                        question = await db_service.get_question(answer.question_id)
                        if question:
                            answered_questions.append(question)
                    
                    if answered_questions:
                        # –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º order_number
                        last_question = max(answered_questions, key=lambda x: x.order_number)
                        
                        if last_question:
                            next_question = await db_service.get_next_question(last_question.id, user.is_paid)
                            if next_question:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await update_user_current_question(telegram_id, next_question.id)
                                user.current_question_id = next_question.id
                            else:
                                # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
                                user.test_completed = True
                                user.test_completed_at = datetime.utcnow()
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                                await db_service.complete_test(telegram_id)
                        else:
                            user = await db_service.start_test(telegram_id)
                else:
                    user = await db_service.start_test(telegram_id)
            else:
                user = await db_service.start_test(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if user.test_completed and not user.is_paid:
            logger.info(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            raise HTTPException(status_code=400, detail="Test already completed")
        
        # –î–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        if user.test_completed and user.is_paid:
            logger.info(f"üîÑ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
            user.test_completed = False
            user.test_completed_at = None
            await db_service.update_user_test_status(telegram_id, False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = await db_service.get_question(user.current_question_id)
        
        if not question:
            raise HTTPException(status_code=404, detail="Question not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_questions = await db_service.get_total_questions(user.is_paid)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        answers = await db_service.get_user_answers(telegram_id)
        answered_count = len(answers)
        
        return CurrentQuestionResponse(
            question=QuestionResponse(
                id=question.id,
                text=question.text,
                order_number=question.order_number,
                type=question.type.value,
                allow_voice=question.allow_voice,
                max_length=question.max_length
            ),
            progress=ProgressResponse(
                current=question.order_number,
                total=total_questions,
                answered=answered_count
            ),
            user=UserStatusResponse(
                is_paid=user.is_paid,
                test_completed=user.test_completed
            )
        )
        
    except Exception as e:
        logger.error(f"Error getting current question: {e}")
        raise HTTPException(status_code=500, detail="Failed to get question")

@app.post("/api/user/{telegram_id}/answer",
          response_model=NextQuestionResponse,
          summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç")
async def save_answer(telegram_id: int, answer_data: AnswerRequest):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    try:
        logger.info(f"üí¨ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id={user.id}, is_paid={user.is_paid}, current_question_id={user.current_question_id}")
        
        if not user.current_question_id:
            logger.error(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            raise HTTPException(status_code=400, detail="No active question")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_question = await db_service.get_question(user.current_question_id)
        
        if not current_question:
            raise HTTPException(status_code=404, detail="Current question not found")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answer = await db_service.save_answer(
            telegram_id=telegram_id,
            question_id=current_question.id,
            text_answer=answer_data.text_answer,
            answer_type=answer_data.answer_type
        )
        
        # Perplexity –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤, –Ω–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
        logger.info(f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç {answer.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ò–ò-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: current_order={current_question.order_number}, is_paid={user.is_paid}")
        next_question = await db_service.get_next_question(
            current_question.id,
            user.is_paid
        )
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {next_question.order_number if next_question else 'None'}")
        
        if next_question:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_current_question(telegram_id, next_question.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            total_questions = await db_service.get_total_questions(user.is_paid)
            answers = await db_service.get_user_answers(telegram_id)
            answered_count = len(answers)
            
            return NextQuestionResponse(
                status="next_question",
                next_question=QuestionResponse(
                    id=next_question.id,
                    text=next_question.text,
                    order_number=next_question.order_number,
                    type=next_question.type.value,
                    allow_voice=next_question.allow_voice,
                    max_length=next_question.max_length
                ),
                progress=ProgressResponse(
                    current=next_question.order_number,
                    total=total_questions,
                    answered=answered_count
                )
            )
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ {current_question.order_number}")
            await db_service.complete_test(telegram_id)
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–µ - —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å—Å—è –Ω–∞ loading.html
            # import asyncio
            # asyncio.create_task(generate_report_background(telegram_id))
            
            response_data = NextQuestionResponse(
                status="redirect_to_loading",  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ loading.html
                message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç..."
            )
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {response_data.model_dump()}")
            return response_data
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error saving answer: {e}")
        raise HTTPException(status_code=500, detail="Failed to save answer")

@app.get("/api/user/{telegram_id}/progress",
         response_model=UserProgressResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
async def get_user_progress(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        answers = await db_service.get_user_answers(telegram_id)
        total_questions = await db_service.get_total_questions(user.is_paid)
        
        return UserProgressResponse(
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "is_paid": user.is_paid,
                "test_completed": user.test_completed,
                "test_started_at": user.test_started_at.isoformat() if user.test_started_at else None,
                "test_completed_at": user.test_completed_at.isoformat() if user.test_completed_at else None
            },
            progress={
                "answered": len(answers),
                "total": total_questions,
                "percentage": round((len(answers) / total_questions) * 100, 1) if total_questions > 0 else 0
            },
            answers=[
                {
                    "question_id": ans.question_id,
                    "text_answer": ans.text_answer,
                    "ai_analysis": ans.ai_analysis,
                    "created_at": ans.created_at.isoformat()
                }
                for ans in answers
            ]
        )
        
    except Exception as e:
        logger.error(f"Error getting user progress: {e}")
        raise HTTPException(status_code=500, detail="Failed to get progress")

@app.get("/api/user/{telegram_id}/profile",
         response_model=UserProfileResponse,
         summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def get_user_profile(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è telegram_id: {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.telegram_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        payment_status = None
        if user.is_paid:
            payment_status = "completed"
        elif user.is_premium_paid:
            payment_status = "pending"
        
        return UserProfileResponse(
            status="success",
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "name": user.name,
                "age": user.age,
                "gender": user.gender
            },
            payment_status=payment_status
        )
        
    except Exception as e:
        logger.error(f"Error getting user profile: {e}")
        raise HTTPException(status_code=500, detail="Failed to get profile")

@app.post("/api/user/{telegram_id}/profile",
          response_model=UserProfileResponse,
          summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          description="–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def update_user_profile(telegram_id: int, profile_data: UserProfileUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è telegram_id: {telegram_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_data}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user.telegram_id}")
        
        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        user = await db_service.update_user_profile(
            telegram_id=telegram_id,
            name=profile_data.name,
            age=profile_data.age,
            gender=profile_data.gender
        )
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: name={user.name}, age={user.age}, gender={user.gender}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        payment_status = None
        if user.is_paid:
            payment_status = "completed"
        elif user.is_premium_paid:
            payment_status = "pending"
        
        return UserProfileResponse(
            status="success",
            user={
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "name": user.name,
                "age": user.age,
                "gender": user.gender
            },
            payment_status=payment_status
        )
        
    except Exception as e:
        logger.error(f"Error updating user profile: {e}")
        raise HTTPException(status_code=500, detail="Failed to update profile")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
from fastapi.responses import JSONResponse, RedirectResponse

@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(status_code=404, content={"error": "Not found"})

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    return JSONResponse(status_code=500, content={"error": "Internal server error"})

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/api/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {"status": "ok", "message": "PRIZMA API is running"}

@app.get("/api/info", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": "PRIZMA API",
        "version": "1.0.0",
        "description": "API –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º",
        "features": {
            "perplexity_ai": PERPLEXITY_ENABLED,
            "pdf_generation": True,
            "payments": True
        },
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/api/health"
        }
    }

@app.get("/api/user/{telegram_id}/report-status", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
async def check_report_status(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if user.is_paid:
            logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç. –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
            return {"status": "premium_paid", "message": "–î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç."}
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_report_{telegram_id}_*.pdf"
        
        import glob
        report_files = glob.glob(str(reports_dir / pattern))
        
        if report_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º st_mtime)
            # –ò–º—è —Ñ–∞–π–ª–∞: prizma_report_{telegram_id}_{timestamp}.pdf
            def extract_timestamp(filepath):
                filename = Path(filepath).name
                # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: prizma_report_123456789_20250627_082506.pdf
                parts = filename.split('_')
                if len(parts) >= 5:
                    try:
                        # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: parts[3] = '20250627', parts[4] = '082506.pdf'
                        date_part = parts[3]
                        time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                        timestamp_str = f"{date_part}_{time_part}"
                        return timestamp_str
                    except:
                        return "00000000_000000"
                return "00000000_000000"
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ø–æ timestamp
            latest_report = max(report_files, key=extract_timestamp)
            return {"status": "ready", "message": "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", "report_path": latest_report}
        else:
            return {"status": "not_ready", "message": "–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"}
            
    except Exception as e:
        logger.error(f"Error checking report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞"}

@app.post("/api/user/{telegram_id}/generate-report", summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞")
async def start_report_generation(telegram_id: int):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "error", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if user.is_paid:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç. –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
            return {"status": "premium_paid", "message": "–î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç."}
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        report_path = await generate_report_background(telegram_id)
        
        if report_path:
            return {"status": "success", "message": "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", "report_path": report_path}
        else:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"}
            
    except Exception as e:
        logger.error(f"Error starting report generation: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"}

@app.get("/api/download/report/{telegram_id}", summary="–°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def download_personal_report(telegram_id: int, download: Optional[str] = None, method: Optional[str] = None, t: Optional[str] = None):
    """–°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from fastapi.responses import FileResponse
    import os
    import glob
    
    try:
        logger.info(f"üìÅ –ó–∞–ø—Ä–æ—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: download={download}, method={method}, t={t}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç")
            raise HTTPException(status_code=400, detail="–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if user.is_paid:
            logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç.")
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
            from fastapi.responses import RedirectResponse
            return RedirectResponse(url=f"/api/download/premium-report/{telegram_id}")
        
        # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_report_{telegram_id}_*.pdf"
        report_files = glob.glob(str(reports_dir / pattern))
        
        if not report_files:
            logger.warning(f"‚ö†Ô∏è –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await generate_report_background(telegram_id)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                report_files = glob.glob(str(reports_dir / pattern))
                if not report_files:
                    logger.error(f"‚ùå –û—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        def extract_timestamp(filepath):
            filename = Path(filepath).name
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: prizma_report_123456789_20250627_082506.pdf
            parts = filename.split('_')
            if len(parts) >= 5:
                try:
                    # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: parts[3] = '20250627', parts[4] = '082506.pdf'
                    date_part = parts[3]
                    time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                    timestamp_str = f"{date_part}_{time_part}"
                    return timestamp_str
                except:
                    pass
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å timestamp, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ fallback
            return str(int(Path(filepath).stat().st_mtime))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–ø–æ—Å–ª–µ–¥–Ω–∏–π –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º) –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        report_files.sort(key=extract_timestamp, reverse=True)
        latest_report = report_files[0]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}")
        logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {latest_report}")
        for i, report in enumerate(report_files[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"   {i+1}. {Path(report).name} (timestamp: {extract_timestamp(report)})")
        
        if not os.path.exists(latest_report):
            logger.error(f"‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {latest_report}")
            raise HTTPException(status_code=500, detail="–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        logger.info(f"üìÑ –û—Ç–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {latest_report}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(latest_report)} –±–∞–π—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        headers = {}
        
        # –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑ Telegram Web App)
        if download == "1":
            headers["Content-Disposition"] = f'attachment; filename="prizma-report-{telegram_id}.pdf"'
            headers["Content-Type"] = "application/pdf"
            headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            headers["Pragma"] = "no-cache"
            headers["Expires"] = "0"
            logger.info("üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è Telegram Web App")
        else:
            # –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers["Content-Disposition"] = f'inline; filename="prizma-report-{telegram_id}.pdf"'
            logger.info("üåê –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=latest_report,
            media_type='application/pdf',
            filename=f"prizma-report-{telegram_id}.pdf",
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading report: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
async def generate_report_background(telegram_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        answers = await db_service.get_user_answers(telegram_id)
        questions = await db_service.get_questions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        from bot.services.perplexity import AIAnalysisService
        ai_service = AIAnalysisService()
        
        result = await ai_service.generate_psychological_report(user, questions, answers)
        
        if result.get("success"):
            report_path = result['report_file']
            logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {report_path}")
            
            # –ù–ï —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            from bot.services.telegram_service import telegram_service
            await telegram_service.send_report_ready_notification(
                telegram_id=telegram_id,
                report_path=report_path,
                is_premium=False
            )
            
            return report_path
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {error_msg}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
            from bot.services.telegram_service import telegram_service
            await telegram_service.send_error_notification(
                telegram_id=telegram_id,
                error_message=error_msg
            )
            
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        from bot.services.telegram_service import telegram_service
        await telegram_service.send_error_notification(
            telegram_id=telegram_id,
            error_message=str(e)
        )
        
        return None

# –ü–õ–ê–¢–ù–ê–Ø –í–ï–†–°–ò–Ø - –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/api/user/{telegram_id}/premium-report-status", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
async def check_premium_report_status(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if not user.is_paid:
            return {"status": "payment_required", "message": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞."}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
        status_info = await db_service.get_report_generation_status(telegram_id, "premium")
        
        if status_info.get("status") == "completed" and status_info.get("report_path"):
            return {
                "status": "ready", 
                "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", 
                "report_path": status_info["report_path"]
            }
        elif status_info.get("status") == "processing":
            return {"status": "processing", "message": "–û—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."}
        elif status_info.get("status") == "failed":
            return {
                "status": "failed", 
                "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", 
                "error": status_info.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            }
        else:
            return {"status": "not_started", "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            
    except Exception as e:
        logger.error(f"Error checking premium report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"}

@app.post("/api/user/{telegram_id}/reset-test", summary="–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def reset_user_test(telegram_id: int):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
        user.test_completed = False
        user.test_completed_at = None
        user.current_question_id = None
        user.test_started_at = None
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deleted_count = await db_service.clear_user_answers(telegram_id)
        
        logger.info(f"üîÑ –¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, —É–¥–∞–ª–µ–Ω–æ {deleted_count} –æ—Ç–≤–µ—Ç–æ–≤")
        
        return {"status": "success", "message": "–¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω", "deleted_answers": deleted_count}
        
    except Exception as e:
        logger.error(f"Error resetting test: {e}")
        raise HTTPException(status_code=500, detail="Failed to reset test")

@app.post("/api/user/{telegram_id}/start-premium-payment", summary="–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞")
async def start_premium_payment(telegram_id: int):
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if user.is_paid:
            return {"status": "already_paid", "message": "–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç."}

        # –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 —Ä—É–±–ª–µ–π)
        amount_decimal = decimal.Decimal(1.00) # –í–∞—à–∞ —Ü–µ–Ω–∞ –∑–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        amount_in_kopecks = int(amount_decimal * 100) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
        description = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"

        # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ (invoice_id –≤—Ä–µ–º–µ–Ω–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp)
        temp_invoice_id = str(int(time.time() * 1_000_000))
        payment = await db_service.create_payment(
            user_id=user.id,
            amount=amount_in_kopecks,
            currency="RUB",
            description=description,
            invoice_id=temp_invoice_id,
            status=PaymentStatus.PENDING
        )

        # 2. –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        inv_id = payment.id

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º invoice_id –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await db_service.update_payment_invoice_id(payment.id, str(inv_id))

        robokassa = RobokassaService(
            merchant_login=settings.ROBOKASSA_LOGIN,
            merchant_password_1=settings.ROBOKASSA_PASSWORD_1,
            merchant_password_2=settings.ROBOKASSA_PASSWORD_2,
            is_test=1 if settings.ROBOKASSA_TEST else 0
        )

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ Telegram Web App
        base_url = settings.WEBAPP_URL
        
        # URL –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ Telegram Web App —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —É—Å–ø–µ—Ö–∞
        telegram_success_url = f"{settings.TELEGRAM_WEBAPP_URL}?startapp=payment_success_{inv_id}"
        success_url = telegram_success_url
        
        # URL –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ Telegram Web App —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—à–∏–±–∫–∏
        telegram_fail_url = f"{settings.TELEGRAM_WEBAPP_URL}?startapp=payment_fail"
        fail_url = telegram_fail_url
        
        logger.info(f"üîó SuccessURL: {success_url}")
        logger.info(f"üîó FailURL: {fail_url}")

        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É Robokassa —Å URL –≤–æ–∑–≤—Ä–∞—Ç–∞
        payment_link = robokassa.generate_payment_link(
            cost=amount_decimal,
            number=inv_id,
            description=description,
            is_test=1 if settings.ROBOKASSA_TEST else 0,
            success_url=success_url,
            fail_url=fail_url
        )
        
        logger.info(f"üí∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {payment_link}")
        
        return {"status": "success", "message": "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞", "payment_link": payment_link}
        
    except Exception as e:
        logger.error(f"Error starting premium payment for user {telegram_id}: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"}

@app.get("/api/payment/fail-redirect", summary="–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç")
async def handle_payment_fail(request: Request):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Web App –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    try:
        telegram_webapp_url = f"{settings.TELEGRAM_WEBAPP_URL}?startapp=payment_fail"
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞: {telegram_webapp_url}")
        return RedirectResponse(url=telegram_webapp_url, status_code=302)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
        return RedirectResponse(url="/uncomplete-payment.html", status_code=302)

@app.get("/api/payment/success/{invoice_id}", summary="–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç")
async def handle_payment_success(invoice_id: int, request: Request):
    """
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç Robokassa, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂
    –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram Web App.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Robokassa (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        # ... (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ Robokassa –µ–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ invoice_id
        payment = await db_service.get_payment_by_invoice_id(invoice_id)
        if not payment:
            raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if payment.status != PaymentStatus.COMPLETED:
            await db_service.update_payment_status(payment.id, PaymentStatus.COMPLETED)
            user = await db_service.get_user_by_id(payment.user_id)
            if user:
                await db_service.upgrade_to_premium_and_continue_test(user.telegram_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ Web App
        telegram_webapp_url = f"{settings.TELEGRAM_WEBAPP_URL}?startapp=payment_success"
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞: {telegram_webapp_url}")
        
        return RedirectResponse(url=telegram_webapp_url, status_code=302)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
        fail_url = f"{settings.TELEGRAM_WEBAPP_URL}?startapp=payment_fail"
        return RedirectResponse(url=fail_url, status_code=302)

@app.get("/api/robokassa/result", summary="Endpoint –¥–ª—è ResultURL Robokassa")
async def robokassa_result(request: Request):
    try:
        query_params = dict(request.query_params)
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ResultURL –æ—Ç Robokassa: {query_params}")
        out_sum = query_params.get('OutSum')
        inv_id = query_params.get('InvId')
        signature_value = query_params.get('SignatureValue')
        if not all([out_sum, inv_id, signature_value]):
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ ResultURL")
            return "bad sign"
        robokassa = RobokassaService(
            merchant_login=settings.ROBOKASSA_LOGIN,
            merchant_password_1=settings.ROBOKASSA_PASSWORD_1,
            merchant_password_2=settings.ROBOKASSA_PASSWORD_2,
            is_test=1 if settings.ROBOKASSA_TEST else 0
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è ResultURL
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ResultURL: out_sum={out_sum}, inv_id={inv_id}, signature_value={signature_value}")
        signature_valid = robokassa.check_signature_result(out_sum, inv_id, signature_value)
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {signature_valid}")
        if not signature_valid:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ ResultURL –¥–ª—è InvId: {inv_id}")
            return "bad sign"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        payment = await db_service.get_payment_by_invoice_id(inv_id)
        if payment:
            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –≤ –ë–î: ID={payment.id}, —Å—Ç–∞—Ç—É—Å={payment.status}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={payment.user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂
            if payment.status == PaymentStatus.COMPLETED:
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {inv_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å COMPLETED)")
                return f"OK{inv_id}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            await db_service.update_payment_status(payment.id, PaymentStatus.COMPLETED)
            user = await db_service.get_user_by_id(payment.user_id)
            if user:
                await db_service.upgrade_to_premium_and_continue_test(user.telegram_id)
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {inv_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}, —Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω")
            else:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {payment.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return f"OK{inv_id}"
        else:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Å InvId {inv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return "bad sign"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ResultURL Robokassa: {e}")
        return "error"

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö SuccessURL –∑–∞–ø—Ä–æ—Å–æ–≤
_processed_success_requests = set()
_last_cache_cleanup = time.time()

def cleanup_success_cache():
    """–û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
    global _last_cache_cleanup, _processed_success_requests
    current_time = time.time()
    if current_time - _last_cache_cleanup > 86400:  # 24 —á–∞—Å–∞
        _processed_success_requests.clear()
        _last_cache_cleanup = current_time
        logger.info("üßπ –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö SuccessURL –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω")

@app.get("/api/robokassa/success", summary="Endpoint –¥–ª—è SuccessURL Robokassa")
async def robokassa_success(request: Request):
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cleanup_success_cache()
        
        query_params = dict(request.query_params)
        out_sum = query_params.get('OutSum')
        inv_id = query_params.get('InvId')
        signature_value = query_params.get('SignatureValue')
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_key = f"{inv_id}_{out_sum}_{signature_value}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        if request_key in _processed_success_requests:
            logger.info(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å SuccessURL –¥–ª—è InvId {inv_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            response = RedirectResponse(url="/api/payment/success", status_code=302)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            response.headers["Pragma"] = "no-cache"
            response.headers["Expires"] = "0"
            return response
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ SuccessURL –æ—Ç Robokassa: {query_params}")
        
        if not all([out_sum, inv_id, signature_value]):
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ SuccessURL")
            return RedirectResponse(url="/uncomplete-payment.html", status_code=302)
        
        robokassa = RobokassaService(
            merchant_login=settings.ROBOKASSA_LOGIN,
            merchant_password_1=settings.ROBOKASSA_PASSWORD_1,
            merchant_password_2=settings.ROBOKASSA_PASSWORD_2,
            is_test=1 if settings.ROBOKASSA_TEST else 0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è SuccessURL
        if not robokassa.check_signature_success(out_sum, inv_id, signature_value):
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ SuccessURL –¥–ª—è InvId: {inv_id}")
            return RedirectResponse(url="/uncomplete-payment.html", status_code=302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        payment = await db_service.get_payment_by_invoice_id(inv_id)
        if payment:
            logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –≤ –ë–î: ID={payment.id}, —Å—Ç–∞—Ç—É—Å={payment.status}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={payment.user_id}")
            
            if payment.status == PaymentStatus.COMPLETED:
                logger.info(f"üéâ –ü–ª–∞—Ç–µ–∂ {inv_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞.")
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                _processed_success_requests.add(request_key)
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /complete-payment.html")
                response = RedirectResponse(url="/complete-payment.html", status_code=302)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
                response.headers["Pragma"] = "no-cache"
                response.headers["Expires"] = "0"
                return response
            else:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {inv_id} –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ COMPLETED: {payment.status}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ ResultURL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                await db_service.update_payment_status(payment.id, PaymentStatus.COMPLETED)
                user = await db_service.get_user_by_id(payment.user_id)
                if user:
                    logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user.id}, telegram_id={user.telegram_id}, is_paid={user.is_paid}")
                    await db_service.upgrade_to_paid(user.telegram_id)
                    logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {inv_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ COMPLETED –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
                    updated_user = await db_service.get_user_by_id(payment.user_id)
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: is_paid={updated_user.is_paid}")
                else:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {payment.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                _processed_success_requests.add(request_key)
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API endpoint
                logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
                response = RedirectResponse(url="/api/payment/success", status_code=302)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
                response.headers["Pragma"] = "no-cache"
                response.headers["Expires"] = "0"
                return response
        else:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Å InvId {inv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            logger.error(f"‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î")
            return RedirectResponse(url="/uncomplete-payment.html", status_code=302)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SuccessURL Robokassa: {e}")
        return RedirectResponse(url="/uncomplete-payment.html", status_code=302)


@app.get("/api/robokassa/fail", summary="Endpoint –¥–ª—è FailURL Robokassa")
async def robokassa_fail(request: Request):
    logger.info(f"üíî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ FailURL –æ—Ç Robokassa: {request.query_params}")
    return RedirectResponse(url="/uncomplete-payment.html", status_code=302)

@app.get("/api/payment/redirect-fail", summary="Redirect –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –†–æ–±–æ–∫–∞—Å—Å—ã)")
async def payment_redirect_fail(request: Request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ –†–æ–±–æ–∫–∞—Å—Å–µ"""
    logger.info(f"üíî –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {request.query_params}")
    return RedirectResponse(url="/uncomplete-payment.html", status_code=302)




@app.get("/api/payment/success/{inv_id}", summary="–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å ID")
async def payment_success_with_id(inv_id: str, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å ID –ø–ª–∞—Ç–µ–∂–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ)"""
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å InvId: {inv_id}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {request.query_params}")
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
    return RedirectResponse(url="/api/payment/success", status_code=302)

@app.get("/api/payment/success", summary="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è Telegram Web App")
async def payment_success_page(request: Request):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤ Telegram Web App"""
    try:
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        html_file = STATIC_DIR / "complete-payment.html"
        if not html_file.exists():
            raise HTTPException(status_code=404, detail="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        with open(html_file, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è Telegram Web App
        from fastapi.responses import HTMLResponse
        return HTMLResponse(
            content=html_content,
            headers={
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


@app.post("/api/user/{telegram_id}/generate-premium-report", summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
async def start_premium_report_generation(telegram_id: int, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    try:
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {"status": "error", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if not user.is_paid:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É.")
            return {"status": "payment_required", "message": "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞."}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –æ—Ç—á–µ—Ç—ã
        await db_service.reset_stuck_reports(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç
        is_generating = await db_service.is_report_generating(telegram_id, "premium")
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {is_generating}")
        
        if is_generating:
            logger.info(f"‚è≥ –û—Ç—á–µ—Ç —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            bot_link = os.getenv("TELEGRAM_BOT_LINK", "https://t.me/myprizma_bot")
            return {
                "status": "already_processing",
                "message": "–í–∞—à –ø—Ä–µ–º–∏—É–º-–æ—Ç—á–µ—Ç —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ú—ã –ø—Ä–∏—à–ª–µ–º –µ–≥–æ –≤ –±–æ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.",
                "bot_link": bot_link
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await db_service.update_report_generation_status(
            telegram_id, 
            "premium", 
            ReportGenerationStatus.PROCESSING
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        background_tasks.add_task(generate_premium_report_async, telegram_id)
        
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        return {
            "status": "started", 
            "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏."
        }
            
    except Exception as e:
        logger.error(f"Error starting premium report generation: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"}

@app.get("/api/download/premium-report/{telegram_id}", summary="–°–∫–∞—á–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def download_premium_personal_report(telegram_id: int, download: Optional[str] = None, method: Optional[str] = None, t: Optional[str] = None):
    """–°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    from fastapi.responses import FileResponse
    import os
    import glob
    
    try:
        logger.info(f"üìÅ –ó–∞–ø—Ä–æ—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: download={download}, method={method}, t={t}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã)
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ is_paid)
        reports_dir = Path("reports")
        pattern = f"prizma_premium_report_{telegram_id}_*.pdf"
        report_files = glob.glob(str(reports_dir / pattern))
        
        if not report_files:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
            if not user.is_paid:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise HTTPException(status_code=403, detail="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.")
            
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await generate_premium_report_background(telegram_id)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                report_files = glob.glob(str(reports_dir / pattern))
                if not report_files:
                    logger.error(f"‚ùå –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        def extract_timestamp(filepath):
            filename = Path(filepath).name
            parts = filename.split('_')
            if len(parts) >= 5:
                try:
                    date_part = parts[3]
                    time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                    timestamp_str = f"{date_part}_{time_part}"
                    return timestamp_str
                except:
                    pass
            return str(int(Path(filepath).stat().st_mtime))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        report_files.sort(key=extract_timestamp, reverse=True)
        latest_report = report_files[0]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}")
        logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: {latest_report}")
        
        if not os.path.exists(latest_report):
            logger.error(f"‚ùå –§–∞–π–ª –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {latest_report}")
            raise HTTPException(status_code=500, detail="–§–∞–π–ª –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        logger.info(f"üìÑ –û—Ç–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç: {latest_report}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(latest_report)} –±–∞–π—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        headers = {}
        
        # –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑ Telegram Web App)
        if download == "1":
            headers["Content-Disposition"] = f'attachment; filename="prizma-premium-report-{telegram_id}.pdf"'
            headers["Content-Type"] = "application/pdf"
            headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            headers["Pragma"] = "no-cache"
            headers["Expires"] = "0"
            logger.info("üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram Web App")
        else:
            # –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            headers["Content-Disposition"] = f'inline; filename="prizma-premium-report-{telegram_id}.pdf"'
            logger.info("üåê –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=latest_report,
            media_type='application/pdf',
            filename=f"prizma-premium-report-{telegram_id}.pdf",
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error downloading premium report: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def generate_premium_report_background(telegram_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (50 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        answers = await db_service.get_user_answers(telegram_id)
        questions = await db_service.get_questions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        from bot.services.perplexity import AIAnalysisService
        ai_service = AIAnalysisService()
        
        result = await ai_service.generate_premium_report(user, questions, answers)
        
        if result.get("success"):
            report_path = result['report_file']
            logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {report_path}")
            return report_path
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result.get('error')}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è Background Tasks
async def generate_premium_report_async(telegram_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        answers = await db_service.get_user_answers(telegram_id)
        questions = await db_service.get_questions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å
        from bot.services.perplexity import AIAnalysisService
        ai_service = AIAnalysisService()
        
        result = await ai_service.generate_premium_report(user, questions, answers)
        
        if result.get("success"):
            report_path = result['report_file']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            await db_service.update_report_generation_status(
                telegram_id, 
                "premium", 
                ReportGenerationStatus.COMPLETED, 
                report_path=report_path
            )
            
            logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {report_path}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            from bot.services.telegram_service import telegram_service
            sent = await telegram_service.send_report_ready_notification(
                telegram_id=telegram_id,
                report_path=report_path,
                is_premium=True
            )
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –±–æ—Ç, –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if sent:
                try:
                    await db_service.reset_user_after_premium_report(telegram_id)
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            await db_service.update_report_generation_status(
                telegram_id, 
                "premium", 
                ReportGenerationStatus.FAILED, 
                error=error_msg
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
            from bot.services.telegram_service import telegram_service
            await telegram_service.send_error_notification(
                telegram_id=telegram_id,
                error_message=error_msg
            )
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {error_msg}")
            
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await db_service.update_report_generation_status(
            telegram_id, 
            "premium", 
            ReportGenerationStatus.FAILED, 
            error=str(e)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        from bot.services.telegram_service import telegram_service
        await telegram_service.send_error_notification(
            telegram_id=telegram_id,
            error_message=str(e)
        )
        
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ü–õ–ê–¢–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

@app.get("/api/user/{telegram_id}/reports-status", summary="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def check_user_reports_status(telegram_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–î–ò–ù –†–ê–ó
        user = await db_service.get_or_create_user(telegram_id=telegram_id)
        
        if not user.test_completed:
            return {
                "status": "test_not_completed", 
                "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
                "available_report": None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ø–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        free_report_status = await check_report_status_with_user(telegram_id, user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ (–ø–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        premium_report_status = await check_premium_report_status_with_user(telegram_id, user)
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {free_report_status.get('status')}")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞: {premium_report_status.get('status')}")
        logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª: {user.is_paid}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        available_report = None
        
        if user.is_paid and premium_report_status.get('status') == 'ready' and premium_report_status.get('report_path') and str(premium_report_status.get('report_path')).lower().endswith('.pdf'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤
            available_report = {
                "type": "premium",
                "status": "ready",
                "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é",
                "download_url": f"/api/download/premium-report/{telegram_id}"
            }
        elif free_report_status.get('status') == 'ready':
            # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
            available_report = {
                "type": "free",
                "status": "ready", 
                "message": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é",
                "download_url": f"/api/download/report/{telegram_id}"
            }
        elif free_report_status.get('status') == 'premium_paid':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º, –Ω–æ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
            if user.is_paid:
                available_report = {
                    "type": "premium",
                    "status": "not_started",
                    "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                }
            else:
                available_report = {
                    "type": "free",
                    "status": "premium_paid",
                    "message": "–î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç"
                }
        elif premium_report_status.get('status') in ['processing', 'ready']:
            # –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            available_report = {
                "type": "premium",
                "status": "processing",
                "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."
            }
        elif premium_report_status.get('status') == 'payment_required':
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞
            available_report = {
                "type": "premium",
                "status": "payment_required",
                "message": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞"
            }
        elif user.is_paid and premium_report_status.get('status') == 'failed':
            # –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            if free_report_status.get('status') == 'ready':
                available_report = {
                    "type": "free",
                    "status": "ready",
                    "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤",
                    "download_url": f"/api/download/report/{telegram_id}",
                    "fallback": True
                }
            else:
                available_report = {
                    "type": "premium",
                    "status": "failed",
                    "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞",
                    "error": premium_report_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                }
        elif free_report_status.get('status') == 'processing':
            # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            available_report = {
                "type": "free",
                "status": "processing",
                "message": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."
            }
        elif free_report_status.get('status') == 'failed':
            # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            available_report = {
                "type": "free",
                "status": "failed",
                "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
                "error": free_report_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            }
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            available_report = {
                "type": "none",
                "status": "not_available",
                "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"
            }
        
        return {
            "status": "success",
            "user_id": telegram_id,
            "test_completed": user.test_completed,
            "is_paid": user.is_paid,
            "free_report_status": free_report_status,
            "premium_report_status": premium_report_status,
            "available_report": available_report
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}",
            "available_report": None
        }

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def check_report_status_with_user(telegram_id: int, user: User):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"""
    try:
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if user.is_paid:
            logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç. –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
            return {"status": "premium_paid", "message": "–î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç."}
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reports_dir = Path("reports")
        pattern = f"prizma_report_{telegram_id}_*.pdf"
        
        import glob
        report_files = glob.glob(str(reports_dir / pattern))
        
        if report_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º st_mtime)
            # –ò–º—è —Ñ–∞–π–ª–∞: prizma_report_{telegram_id}_{timestamp}.pdf
            def extract_timestamp(filepath):
                filename = Path(filepath).name
                # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: prizma_report_123456789_20250627_082506.pdf
                parts = filename.split('_')
                if len(parts) >= 5:
                    try:
                        # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: parts[3] = '20250627', parts[4] = '082506.pdf'
                        date_part = parts[3]
                        time_part = parts[4].replace('.pdf', '').replace('.txt', '')
                        timestamp_str = f"{date_part}_{time_part}"
                        return timestamp_str
                    except:
                        return "00000000_000000"
                return "00000000_000000"
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ø–æ timestamp
            latest_report = max(report_files, key=extract_timestamp)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if os.path.exists(latest_report):
                return {"status": "ready", "message": "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", "report_path": latest_report}
            else:
                return {"status": "not_ready", "message": "–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"}
        else:
            return {"status": "not_ready", "message": "–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"}
            
    except Exception as e:
        logger.error(f"Error checking report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞"}

async def check_premium_report_status_with_user(telegram_id: int, user: User):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"""
    try:
        if not user.test_completed:
            return {"status": "test_not_completed", "message": "–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç
        if not user.is_paid:
            return {"status": "payment_required", "message": "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞."}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –æ—Ç—á–µ—Ç—ã
        await db_service.reset_stuck_reports(telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
        status_info = await db_service.get_report_generation_status(telegram_id, "premium")
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {status_info}")
        
        # –ï—Å–ª–∏ –≤ –ë–î COMPLETED ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ PDF
        if status_info.get("status") == "COMPLETED" and status_info.get("report_path"):
            report_path = status_info["report_path"]
            # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –±—ã—Ç—å PDF
            if os.path.exists(report_path) and report_path.lower().endswith('.pdf'):
                return {
                    "status": "ready", 
                    "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", 
                    "report_path": report_path
                }
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–µ PDF (–Ω–∞–ø—Ä–∏–º–µ—Ä .txt fallback) ‚Äì —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
                return {
                    "status": "processing",
                    "message": "–ü—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è"
                }
        elif status_info.get("status") == "PROCESSING":
            return {"status": "processing", "message": "–û—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."}
        elif status_info.get("status") == "FAILED":
            return {
                "status": "failed", 
                "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", 
                "error": status_info.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            }
        else:
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: not_started (—Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î: {status_info.get('status')})")
            return {"status": "not_started", "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            
    except Exception as e:
        logger.error(f"Error checking premium report status: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤)
app.mount("/", StaticFiles(directory=STATIC_DIR, html=True), name="static")