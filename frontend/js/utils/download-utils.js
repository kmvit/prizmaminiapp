/**
 * Download Utils - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 * –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */

class DownloadUtils {
    /**
     * –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} reportType - –¢–∏–ø –æ—Ç—á–µ—Ç–∞ ('free' –∏–ª–∏ 'premium')
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     */
    static async downloadReport(userId, reportType, options = {}) {
        try {
            console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞: ${reportType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const result = await ApiClient.downloadReport(userId, reportType);
            
            console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω:', result);
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (window.TelegramWebApp) {
                window.TelegramWebApp.showAlert(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`);
            } else {
                alert(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`);
            }
            
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
     * @param {string} url - URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @returns {Promise<void>}
     */
    static async downloadViaTelegram(url) {
        if (!window.TelegramWebApp || !window.TelegramWebApp.isInTelegram()) {
            throw new Error('–ù–µ –≤ Telegram Web App');
        }

        return new Promise((resolve, reject) => {
            try {
                // –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ Telegram
                window.TelegramWebApp.openLink(url);
                resolve();
            } catch (error) {
                reject(error);
            }
        });
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Fetch API
     * @param {string} url - URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
     * @returns {Promise<void>}
     */
    static async downloadViaFetch(url, filename) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const blob = await response.blob();
            const downloadUrl = window.URL.createObjectURL(blob);
            
            // –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = filename || 'report.pdf';
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // –û—á–∏—Å—Ç–∏—Ç—å URL
            window.URL.revokeObjectURL(downloadUrl);
            
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ fetch: ${error.message}`);
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
     * @param {string} url - URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @returns {Promise<void>}
     */
    static async downloadViaDirectLink(url) {
        return new Promise((resolve, reject) => {
            try {
                // –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                const link = document.createElement('a');
                link.href = url;
                link.target = '_blank';
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                resolve();
            } catch (error) {
                reject(error);
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
     * @param {string} url - URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     */
    static showDownloadInstructions(url) {
        const message = `
üì• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä
3. –§–∞–π–ª –Ω–∞—á–Ω–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è

–°—Å—ã–ª–∫–∞: ${url}

–ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫..."
        `;

        if (window.TelegramWebApp) {
            window.TelegramWebApp.showAlert(message);
        } else {
            alert(message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
     */
    static checkDownloadSupport() {
        const support = {
            telegram: !!window.TelegramWebApp && window.TelegramWebApp.isInTelegram(),
            fetch: !!window.fetch,
            download: !!document.createElement('a').download,
            blob: !!window.Blob,
            url: !!window.URL && !!window.URL.createObjectURL
        };

        console.log('üìã –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', support);
        return support;
    }

    /**
     * –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     * @param {string} url - URL —Ñ–∞–π–ª–∞
     * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
     * @param {Function} onProgress - Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @returns {Promise<void>}
     */
    static async downloadWithProgress(url, filename, onProgress) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const contentLength = response.headers.get('content-length');
            const total = parseInt(contentLength, 10);
            let loaded = 0;

            const reader = response.body.getReader();
            const chunks = [];

            while (true) {
                const { done, value } = await reader.read();
                
                if (done) break;
                
                chunks.push(value);
                loaded += value.length;
                
                if (onProgress && total) {
                    const progress = (loaded / total) * 100;
                    onProgress(progress, loaded, total);
                }
            }

            // –°–æ–∑–¥–∞—Ç—å blob –∏–∑ —á–∞–Ω–∫–æ–≤
            const blob = new Blob(chunks);
            const downloadUrl = window.URL.createObjectURL(blob);
            
            // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = filename;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            window.URL.revokeObjectURL(downloadUrl);

        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: ${error.message}`);
        }
    }

    /**
     * –°–∫–∞—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
     * @param {Array} files - –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     */
    static async downloadMultipleFiles(files) {
        const results = [];
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            try {
                console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${i + 1}/${files.length}: ${file.name}`);
                
                const result = await this.downloadReport(
                    file.userId, 
                    file.reportType, 
                    file.options
                );
                
                results.push({
                    success: true,
                    filename: file.name,
                    result
                });
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}:`, error);
                results.push({
                    success: false,
                    filename: file.name,
                    error: error.message
                });
            }
        }
        
        return results;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param {string} url - URL —Ñ–∞–π–ª–∞
     * @returns {Promise<number>} –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     */
    static async getFileSize(url) {
        try {
            const response = await fetch(url, { method: 'HEAD' });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const contentLength = response.headers.get('content-length');
            return contentLength ? parseInt(contentLength, 10) : 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:', error);
            return 0;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
     */
    static formatFileSize(bytes) {
        if (bytes === 0) return '0 –ë';
        
        const k = 1024;
        const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.DownloadUtils = DownloadUtils; 